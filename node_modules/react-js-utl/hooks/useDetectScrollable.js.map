{"version":3,"sources":["../src/hooks/useDetectScrollable.js"],"names":["useEffect","useCallback","useState","throttle","debounce","hasHorizontalScrollbar","hasVerticalScrollbar","useEventListener","detect","ref","isScrollable","setIsScrollable","shouldDetectHorizontallyScrollable","current","hasScrollbar","throttledDetect","debouncedDetect","useDetectScrollablePrivate","detectOnResize","detectIfScrollable","window","ResizeObserver","element","resizeObserver","observe","unobserve","disconnect","eventName","listener","useDetectScrollable","isVerticallyScrollable","isHorizontallyScrollable","useDetectVerticallyScrollable","useDetectHorizontallyScrollable"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useEffect, useCallback, useState } from \"react\";\nimport {\n  throttle,\n  debounce,\n  hasHorizontalScrollbar,\n  hasVerticalScrollbar,\n} from \"js-utl\";\nimport useEventListener from \"@use-it/event-listener\";\n\n/**\n * @type {Function}\n */\nconst detect = ({\n  ref,\n  isScrollable,\n  setIsScrollable,\n  shouldDetectHorizontallyScrollable,\n}) => {\n  if (ref.current) {\n    const hasScrollbar = shouldDetectHorizontallyScrollable\n      ? hasHorizontalScrollbar(ref.current)\n      : hasVerticalScrollbar(ref.current);\n    if (hasScrollbar && !isScrollable) {\n      setIsScrollable(true);\n    } else if (!hasScrollbar && isScrollable) {\n      setIsScrollable(false);\n    }\n  }\n};\n\n/**\n * @type {Function}\n */\nconst throttledDetect = throttle(detect, 100);\n\n/**\n * @type {Function}\n */\nconst debouncedDetect = debounce(detect, 110);\n\nfunction useDetectScrollablePrivate(\n  ref,\n  { detectOnResize = true, shouldDetectHorizontallyScrollable = false } = {}\n) {\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  const detectIfScrollable = useCallback(() => {\n    detect({\n      ref,\n      isScrollable,\n      setIsScrollable,\n      shouldDetectHorizontallyScrollable,\n    });\n  }, [ref, isScrollable, shouldDetectHorizontallyScrollable]);\n\n  useEffect(() => {\n    detectIfScrollable();\n  });\n\n  useEffect(() => {\n    if (ref.current && window.ResizeObserver) {\n      const element = ref.current;\n      const resizeObserver = new ResizeObserver(() => {\n        detectIfScrollable();\n      });\n      resizeObserver.observe(ref.current);\n      return () => {\n        element && resizeObserver.unobserve(element);\n        resizeObserver.disconnect();\n      };\n    }\n  }, [ref, detectIfScrollable]);\n\n  const [eventName, listener] = detectOnResize\n    ? [\n        \"resize\",\n        () => {\n          throttledDetect({\n            ref,\n            isScrollable,\n            setIsScrollable,\n            shouldDetectHorizontallyScrollable,\n          });\n          debouncedDetect({\n            ref,\n            isScrollable,\n            setIsScrollable,\n            shouldDetectHorizontallyScrollable,\n          });\n        },\n      ]\n    : [void 0, () => {}];\n  useEventListener(eventName, listener);\n\n  return isScrollable;\n}\n\n/**\n * Hook to determine if an element is scrollable.\n *\n * @param {Object} ref A React ref (e.g. returned by `useRef()`) for the underlying element.\n * @param {Object} [options] Options.\n * @param {boolean} [options.detectOnResize] True to detect the scrollbars also when the window is resized (default),\n *                                           false otherwise.\n * @return {Object} An object with two properties:\n *\n *                      - isVerticallyScrollable (boolean): True if the element is vertically scrollable, false otherwise.\n *                      - isHorizontallyScrollable (boolean): True if the element is horizontally scrollable, false otherwise.\n *\n */\nexport default function useDetectScrollable(\n  ref,\n  { detectOnResize = true } = {}\n) {\n  const isVerticallyScrollable = useDetectScrollablePrivate(ref, {\n    detectOnResize,\n  });\n  const isHorizontallyScrollable = useDetectScrollablePrivate(ref, {\n    detectOnResize,\n    shouldDetectHorizontallyScrollable: true,\n  });\n\n  return { isVerticallyScrollable, isHorizontallyScrollable };\n}\n\n/**\n * Hook to determine if an element is vertically scrollable.\n *\n * @param {Object} ref A React ref (e.g. returned by `useRef()`) for the underlying element.\n * @param {Object} [options] Options.\n * @param {boolean} [options.detectOnResize] True to detect the scrollbars also when the window is resized (default),\n *                                           false otherwise.\n * @return {boolean} True if the element is vertically scrollable, false otherwise.\n */\nexport function useDetectVerticallyScrollable(\n  ref,\n  { detectOnResize = true } = {}\n) {\n  return useDetectScrollablePrivate(ref, { detectOnResize });\n}\n\n/**\n * Hook to determine if an element is horizontally scrollable.\n *\n * @param {Object} ref A React ref (e.g. returned by `useRef()`) for the underlying element.\n * @param {Object} [options] Options.\n * @param {boolean} [options.detectOnResize] True to detect the scrollbars also when the window is resized (default),\n *                                           false otherwise.\n * @return {Object} True if the element is horizontally scrollable, false otherwise.\n */\nexport function useDetectHorizontallyScrollable(\n  ref,\n  { detectOnResize = true } = {}\n) {\n  return useDetectScrollablePrivate(ref, {\n    detectOnResize,\n    shouldDetectHorizontallyScrollable: true,\n  });\n}\n"],"file":"useDetectScrollable.js"}