{"version":3,"sources":["../src/hooks/useCumulativeShallowDiff.js"],"names":["useRef","useMemo","useIsUpdate","isPlainObject","shallowEqual","shallowObjectDiff","isObjectEmpty","extend","useCumulativeShallowDiff","value","valueDiffRef","diff","werePreviousAndCurrentObjectsDiffedAndThereWasADiff","isUpdate","previousValue","current","previousDiff","newDiff","objB"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SACEC,aADF,EAEEC,YAFF,EAGEC,iBAHF,EAIEC,aAJF,EAKEC,MALF,QAMO,QANP;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,wBAAT,CAAkCC,KAAlC,EAAyC;AACtD,MAAMC,YAAY,GAAGV,MAAM,CAAC;AAC1BS,IAAAA,KAAK,EAALA,KAD0B;AAE1BE,IAAAA,IAAI,EAAE,EAFoB;AAG1BC,IAAAA,mDAAmD,EAAE;AAH3B,GAAD,CAA3B;AAMA,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACAO,EAAAA,KAAK,GAAGR,OAAO,CAAC,YAAM;AACpB,QAAMa,aAAa,GAAGJ,YAAY,CAACK,OAAb,CAAqBN,KAA3C;;AACA,QAAI,CAACI,QAAL,EAAe;AACb,aAAOC,aAAP;AACD;;AACD,QAAIX,aAAa,CAACW,aAAD,CAAb,IAAgCX,aAAa,CAACM,KAAD,CAAjD,EAA0D;AACxD,UAAMO,YAAY,GAAGN,YAAY,CAACK,OAAb,CAAqBJ,IAA1C;AACA,UAAMA,IAAI,GAAGN,iBAAiB,CAACS,aAAD,EAAgBL,KAAhB,CAA9B;AACA,UAAMQ,OAAO,GAAGN,IAAI,CAACO,IAArB;;AACA,UAAIZ,aAAa,CAACW,OAAD,CAAb,IAA0Bb,YAAY,CAACY,YAAD,EAAeC,OAAf,CAA1C,EAAmE;AACjE,eAAOP,YAAY,CAACK,OAAb,CACJH,mDADI,GAEHI,YAFG,GAGHF,aAHJ;AAID,OALD,MAKO;AACLJ,QAAAA,YAAY,CAACK,OAAb,CAAqBH,mDAArB,GAA2E,IAA3E;AACAF,QAAAA,YAAY,CAACK,OAAb,CAAqBN,KAArB,GAA6BF,MAAM,CAAC,EAAD,EAAKO,aAAL,EAAoBG,OAApB,CAAnC;AACAP,QAAAA,YAAY,CAACK,OAAb,CAAqBJ,IAArB,GAA4BM,OAA5B;AACA,eAAOA,OAAP;AACD;AACF,KAfD,MAeO;AACLP,MAAAA,YAAY,CAACK,OAAb,CAAqBH,mDAArB,GAA2E,KAA3E;AACAF,MAAAA,YAAY,CAACK,OAAb,CAAqBJ,IAArB,GAA4B,EAA5B;;AACA,UAAIP,YAAY,CAACU,aAAD,EAAgBL,KAAhB,CAAhB,EAAwC;AACtC,eAAOK,aAAP;AACD;;AACDJ,MAAAA,YAAY,CAACK,OAAb,CAAqBN,KAArB,GAA6BA,KAA7B;AACA,aAAOA,KAAP;AACD;AACF,GA7Bc,EA6BZ,CAACI,QAAD,EAAWJ,KAAX,CA7BY,CAAf;AA+BA,SAAOA,KAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useRef, useMemo } from \"react\";\nimport useIsUpdate from \"./useIsUpdate\";\nimport {\n  isPlainObject,\n  shallowEqual,\n  shallowObjectDiff,\n  isObjectEmpty,\n  extend,\n} from \"js-utl\";\n\n/**\n * Hook to use a cumulative shallow diff of a value.\n *\n * @param {*} value A value.\n * @return {*} The given value, initially.\n *\n *             The previous value if the given value is equal to the previous one and both\n *             are not objects.\n *\n *             If the previous value and the given value are both objects,\n *             then this hook will only return an object containing the diff between the two\n *             accumulating the new keys and their corresponding values.\n *             In this last case, if the resulting object containing the diff is empty\n *             (meaning there's no diff) or if the diff is shallowly equal\n *             to the previous one, then the previous diff object will be returned\n *             if a diff was performed at least once previously, otherwise the previous value\n *             will be returned, meaning that there wasn't a diff before yet\n *             (useful for the array of dependencies of other hooks like \"useEffect\" and \"useMemo\").\n */\nexport default function useCumulativeShallowDiff(value) {\n  const valueDiffRef = useRef({\n    value,\n    diff: {},\n    werePreviousAndCurrentObjectsDiffedAndThereWasADiff: false,\n  });\n\n  const isUpdate = useIsUpdate();\n  value = useMemo(() => {\n    const previousValue = valueDiffRef.current.value;\n    if (!isUpdate) {\n      return previousValue;\n    }\n    if (isPlainObject(previousValue) && isPlainObject(value)) {\n      const previousDiff = valueDiffRef.current.diff;\n      const diff = shallowObjectDiff(previousValue, value);\n      const newDiff = diff.objB;\n      if (isObjectEmpty(newDiff) || shallowEqual(previousDiff, newDiff)) {\n        return valueDiffRef.current\n          .werePreviousAndCurrentObjectsDiffedAndThereWasADiff\n          ? previousDiff\n          : previousValue;\n      } else {\n        valueDiffRef.current.werePreviousAndCurrentObjectsDiffedAndThereWasADiff = true;\n        valueDiffRef.current.value = extend({}, previousValue, newDiff);\n        valueDiffRef.current.diff = newDiff;\n        return newDiff;\n      }\n    } else {\n      valueDiffRef.current.werePreviousAndCurrentObjectsDiffedAndThereWasADiff = false;\n      valueDiffRef.current.diff = {};\n      if (shallowEqual(previousValue, value)) {\n        return previousValue;\n      }\n      valueDiffRef.current.value = value;\n      return value;\n    }\n  }, [isUpdate, value]);\n\n  return value;\n}\n"],"file":"useCumulativeShallowDiff.js"}