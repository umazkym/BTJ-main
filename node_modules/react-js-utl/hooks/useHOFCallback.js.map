{"version":3,"sources":["../src/hooks/useHOFCallback.js"],"names":["useCallback","useRef","useHOFCallback","fn","deps","callback","ref","map","Map","current","clear","HOFCallback","key","memoizedFn","get","args","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBC,EAAxB,EAA4BC,IAA5B,EAAkC;AAC/C,MAAMC,QAAQ,GAAGL,WAAW,CAACG,EAAD,EAAKC,IAAL,CAA5B;AACA,MAAME,GAAG,GAAGL,MAAM,CAAC;AAAEM,IAAAA,GAAG,EAAE,IAAIC,GAAJ,EAAP;AAAkBH,IAAAA,QAAQ,EAARA;AAAlB,GAAD,CAAlB;;AAEA,MAAIA,QAAQ,KAAKC,GAAG,CAACG,OAAJ,CAAYJ,QAA7B,EAAuC;AACrCC,IAAAA,GAAG,CAACG,OAAJ,CAAYF,GAAZ,CAAgBG,KAAhB;AACAJ,IAAAA,GAAG,CAACG,OAAJ,CAAYJ,QAAZ,GAAuBA,QAAvB;AACD;;AAED,MAAMM,WAAW,GAAGX,WAAW,CAC7B,UAAAY,GAAG,EAAI;AACL,QAAIC,UAAU,GAAGP,GAAG,CAACG,OAAJ,CAAYF,GAAZ,CAAgBO,GAAhB,CAAoBF,GAApB,CAAjB;;AACA,QAAI,CAACC,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG;AAAA,0CAAIE,IAAJ;AAAIA,UAAAA,IAAJ;AAAA;;AAAA,eAAaV,QAAQ,MAAR,UAASO,GAAT,SAAiBG,IAAjB,EAAb;AAAA,OAAb;;AACAT,MAAAA,GAAG,CAACG,OAAJ,CAAYF,GAAZ,CAAgBS,GAAhB,CAAoBJ,GAApB,EAAyBC,UAAzB;AACD;;AACD,WAAOA,UAAP;AACD,GAR4B,EAS7B,CAACR,QAAD,CAT6B,CAA/B;AAYA,SAAOM,WAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useCallback, useRef } from \"react\";\n\n/**\n * Hook returning a HOF (higher-order function) which, when called\n * with a given key, returns a memoized function for that same key\n * which can be easily used e.g. in a loop without causing re-renders\n * because of inline arrow functions.\n *\n * @param {Function} fn The function to memoize.\n * @param {Array|undefined} deps Dependencies array for the function, or undefined.\n * @return {Function} A higher-order function which, when called with a given key,\n *                    returns the memoized function \"fn\" which, when called, will receive\n *                    the key as the first parameter as well as the other parameters passed\n *                    to the memoized function when calling it.\n */\nexport default function useHOFCallback(fn, deps) {\n  const callback = useCallback(fn, deps);\n  const ref = useRef({ map: new Map(), callback });\n\n  if (callback !== ref.current.callback) {\n    ref.current.map.clear();\n    ref.current.callback = callback;\n  }\n\n  const HOFCallback = useCallback(\n    key => {\n      let memoizedFn = ref.current.map.get(key);\n      if (!memoizedFn) {\n        memoizedFn = (...args) => callback(key, ...args);\n        ref.current.map.set(key, memoizedFn);\n      }\n      return memoizedFn;\n    },\n    [callback]\n  );\n\n  return HOFCallback;\n}\n"],"file":"useHOFCallback.js"}