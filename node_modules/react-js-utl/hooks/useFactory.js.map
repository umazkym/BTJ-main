{"version":3,"sources":["../src/hooks/useFactory.js"],"names":["useMemo","useCallback","isArray","useFactory","tuplesFn","deps","tuples","testConditionFn","testCondition","Boolean","factoryValue","i","length","tuple","lastTuple"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,OAAT,EAAkBC,WAAlB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA6C;AAAA,MAAfC,IAAe,uEAAR,KAAK,CAAG;AAC1D,MAAMC,MAAM,GAAGN,OAAO,CAACI,QAAD,EAAWC,IAAI,IAAI,EAAnB,CAAtB,CAD0D,CAG1D;;AACA,MAAME,eAAe,GAAGN,WAAW,CACjC,UAAAO,aAAa;AAAA,WACXC,OAAO,CACL,OAAOD,aAAP,KAAyB,UAAzB,GAAsCA,aAAa,EAAnD,GAAwDA,aADnD,CADI;AAAA,GADoB,EAKjC,EALiC,CAAnC;AAQA,MAAME,YAAY,GAAGV,OAAO,CAAC,YAAM;AACjC,QAAIW,CAAC,GAAG,CAAR,CADiC,CAEjC;;AACA,WAAOA,CAAC,GAAGL,MAAM,CAACM,MAAP,GAAgB,CAA3B,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,UAAME,KAAK,GAAGP,MAAM,CAACK,CAAD,CAApB;;AACA,kCAAsCE,KAAtC;AAAA,UAAOL,aAAP;AAAA,UAAsBE,aAAtB;;AACA,UAAIH,eAAe,CAACC,aAAD,CAAnB,EAAoC;AAClC;AACA,eAAOE,aAAP;AACD;AACF;;AACD,QAAMI,SAAS,GAAGR,MAAM,CAACK,CAAD,CAAxB;;AACA,QAAIT,OAAO,CAACY,SAAD,CAAP,IAAsBA,SAAS,CAACF,MAAV,KAAqB,CAA/C,EAAkD;AAChD,sCAAsCE,SAAtC;AAAA,UAAON,cAAP;AAAA,UAAsBE,cAAtB;;AACA,UAAIH,eAAe,CAACC,cAAD,CAAnB,EAAoC;AAClC;AACA,eAAOE,cAAP;AACD,OAL+C,CAOhD;;;AACA,aAAO,KAAK,CAAZ;AACD,KATD,MASO;AACL;AACA,aAAOI,SAAP;AACD;AACF,GAzB2B,EAyBzB,CAACP,eAAD,EAAkBD,MAAlB,CAzByB,CAA5B;AA2BA,SAAOI,YAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useMemo, useCallback } from \"react\";\nimport { isArray } from \"js-utl\";\n\n/**\n * Hook to easily create interchangeable factories switching them\n * in a declarative way based on the given runtime parameters.\n *\n * @param {Function} tuplesFn A function returning an array of tuples, each tuple being an array of two elements:\n *\n *                                - testCondition: A boolean value or a function returning a boolean value\n *                                                 which, if \"true\", instructs this hook to return the \"factory\" factory\n *                                                 bound to this \"testCondition\".\n *                                                 Note that the first \"factory\" for which \"testCondition\" is truthy\n *                                                 will be returned and further tuples will be ignored;\n *\n *                                - factory: Anything. The value to return if \"testCondition\" is a truthy value\n *                                           or a function returning a truthy value.\n *\n *                            The last element of the returned tuples MAY not be a tuple array with two elements,\n *                            and in such case it will be treated as the default factory value to return if none\n *                            of the test conditions of the previous factories are satisfied.\n *                            If the last tuple is not a default value and none of the test conditions of the previous\n *                            factories are satisfied as well as for the factory of last tuple, then \"undefined\"\n *                            will be returned by this hook.\n * @param {Array|undefined} [deps] Dependencies array to use.\n * @return {*} The first factory value for which the test is truthy or returns a truthy value, a default factory value,\n *             or \"undefined\".\n */\nexport default function useFactory(tuplesFn, deps = void 0) {\n  const tuples = useMemo(tuplesFn, deps || []);\n\n  // \"testConditionFn\" is pure and does never change.\n  const testConditionFn = useCallback(\n    testCondition =>\n      Boolean(\n        typeof testCondition === \"function\" ? testCondition() : testCondition\n      ),\n    []\n  );\n\n  const factoryValue = useMemo(() => {\n    let i = 0;\n    // Loop through all the tuples except the last one (handled after this loop).\n    for (; i < tuples.length - 1; i++) {\n      const tuple = tuples[i];\n      const [testCondition, factoryValue] = tuple;\n      if (testConditionFn(testCondition)) {\n        // Test condition for factory value is satisfied.\n        return factoryValue;\n      }\n    }\n    const lastTuple = tuples[i];\n    if (isArray(lastTuple) && lastTuple.length === 2) {\n      const [testCondition, factoryValue] = lastTuple;\n      if (testConditionFn(testCondition)) {\n        // Test condition for last factory value is satisfied.\n        return factoryValue;\n      }\n\n      // No default and no factory value satisfying a test condition.\n      return void 0;\n    } else {\n      // Default factory value.\n      return lastTuple;\n    }\n  }, [testConditionFn, tuples]);\n\n  return factoryValue;\n}\n"],"file":"useFactory.js"}