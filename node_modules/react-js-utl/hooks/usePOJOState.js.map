{"version":3,"sources":["../src/hooks/usePOJOState.js"],"names":["useState","useMemo","partialShallowEqual","usePOJOState","initialState","state","setState","setPOJOState","nextState","prevState","newState"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AACA,SAASC,mBAAT,QAAoC,QAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,YAAtB,EAAoC;AACjD,kBAA0BJ,QAAQ,CAACI,YAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,YAAY,GAAGN,OAAO,CAC1B;AAAA,WAAM,UAAAO,SAAS;AAAA,aACbF,QAAQ,CAAC,UAAAG,SAAS,EAAI;AACpB,YAAMC,QAAQ,GACZ,OAAOF,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAACC,SAAD,CAA3C,GAAyDD,SAD3D;;AAEA,YAAIE,QAAQ,KAAK,IAAjB,EAAuB;AACrB,iBAAOD,SAAP;AACD,SAFD,MAEO;AACL,iBAAOP,mBAAmB,CAACO,SAAD,EAAYC,QAAZ,CAAnB,GACHD,SADG,mCAEEA,SAFF,GAEgBC,QAFhB,CAAP;AAGD;AACF,OAVO,CADK;AAAA,KAAf;AAAA,GAD0B,EAa1B,EAb0B,CAA5B;AAeA,SAAO,CAACL,KAAD,EAAQE,YAAR,CAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useState, useMemo } from \"react\";\nimport { partialShallowEqual } from \"js-utl\";\n\n/**\n * Hook to use a POJO state which merges values of the previous state with the next one\n * if the partial state update of the next state is not the same as the previous state\n * for the same keys.\n *\n * @param {Object|Function} initialState The initial state, either a POJO (Plain Old JavaScript Object)\n *                                       or a function returning a POJO (lazy initial state).\n * @return {Array} A tuple of two values, current state POJO and callback to set state,\n *                 like the one returned by the \"useState\" hook.\n *\n *                 The callback to set state may receive an updater function which will receive\n *                 the previous POJO state as argument and must return the next partial POJO state\n *                 update or \"null\" (to bail out of the state update, read below).\n *\n *                 If the updater function returns \"null\" or a partial POJO state update which\n *                 has the same values for the same keys as the current POJO state, the update will be\n *                 bailed out as for the \"useState\" hook.\n */\nexport default function usePOJOState(initialState) {\n  const [state, setState] = useState(initialState);\n  const setPOJOState = useMemo(\n    () => nextState =>\n      setState(prevState => {\n        const newState =\n          typeof nextState === \"function\" ? nextState(prevState) : nextState;\n        if (newState === null) {\n          return prevState;\n        } else {\n          return partialShallowEqual(prevState, newState)\n            ? prevState\n            : { ...prevState, ...newState };\n        }\n      }),\n    []\n  );\n  return [state, setPOJOState];\n}\n"],"file":"usePOJOState.js"}