{"version":3,"sources":["../src/hooks/useMemoCallback.js"],"names":["useCallback","useRef","useMemo","useMemoCallback","callback","callbackRef","current","memoCallback"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AAChD,MAAMC,WAAW,GAAGJ,MAAM,CAACG,QAAD,CAA1B;AACAF,EAAAA,OAAO,CAAC,YAAM;AACZG,IAAAA,WAAW,CAACC,OAAZ,GAAsBF,QAAtB;AACD,GAFM,EAEJ,CAACA,QAAD,CAFI,CAAP;AAGA,MAAMG,YAAY,GAAGP,WAAW,CAC9B,YAAa;AACX,WAAOK,WAAW,CAACC,OAAZ,OAAAD,WAAW,YAAlB;AACD,GAH6B,EAI9B,CAACA,WAAD,CAJ8B,CAAhC;AAMA,SAAO,OAAOA,WAAW,CAACC,OAAnB,KAA+B,UAA/B,GAA4CC,YAA5C,GAA2DH,QAAlE;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useCallback, useRef, useMemo } from \"react\";\n\n/**\n * Returns a memoized callback which never change and doesn't need a deps array\n * as it is always up to date with the last callback given as parameter.\n *\n * @param {*} callback A callback or another value.\n * @return {*} The memoized callback which never changes or the given value\n *             if the given \"callback\" is not a function.\n */\nexport default function useMemoCallback(callback) {\n  const callbackRef = useRef(callback);\n  useMemo(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n  const memoCallback = useCallback(\n    (...args) => {\n      return callbackRef.current(...args);\n    },\n    [callbackRef]\n  );\n  return typeof callbackRef.current === \"function\" ? memoCallback : callback;\n}\n"],"file":"useMemoCallback.js"}