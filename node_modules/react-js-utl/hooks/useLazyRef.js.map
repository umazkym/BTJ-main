{"version":3,"sources":["../src/hooks/useLazyRef.js"],"names":["useState","useRef","useLazyRef","fn","initialValue","ref"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AACrC,kBAAuBH,QAAQ,CAACG,EAAD,CAA/B;AAAA;AAAA,MAAOC,YAAP;;AACA,MAAMC,GAAG,GAAGJ,MAAM,CAACG,YAAD,CAAlB;AACA,SAAOC,GAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useState, useRef } from \"react\";\n\n/**\n * Hook to create a ref initialized lazily during the initial render.\n *\n * @param {(() => *)|*} fn A function returning the initial value of the ref object's \"current\" property or any\n *                         other value to use as-is if as the initial value of the ref object's \"current\" property.\n * @return {Object} A ref object with its \"current\" property set to the value returned by the given \"fn\" function\n *                  or to the value passed as parameter to this hook if the \"fn\" parameter is not a function.\n */\nexport default function useLazyRef(fn) {\n  const [initialValue] = useState(fn);\n  const ref = useRef(initialValue);\n  return ref;\n}\n"],"file":"useLazyRef.js"}