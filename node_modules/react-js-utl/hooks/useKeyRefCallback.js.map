{"version":3,"sources":["../src/hooks/useKeyRefCallback.js"],"names":["React","useCallback","useRef","useKeyRefCallback","mapRef","key","current","createRef"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,GAA6B;AAC1C,MAAMC,MAAM,GAAGF,MAAM,CAAC,EAAD,CAArB;AACA,SAAOD,WAAW,CAAC,UAAAI,GAAG,EAAI;AACxBD,IAAAA,MAAM,CAACE,OAAP,CAAeD,GAAf,IAAsBD,MAAM,CAACE,OAAP,CAAeD,GAAf,kBAAuBL,KAAK,CAACO,SAAN,EAA7C;AACA,WAAOH,MAAM,CAACE,OAAP,CAAeD,GAAf,CAAP;AACD,GAHiB,EAGf,EAHe,CAAlB;AAID","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport React, { useCallback, useRef } from \"react\";\n\n/**\n * Hook to return a callback which, if called with a key/id, will return a new ref for that key\n * or the same ref for that key if the ref for that key was already created previously\n * (therefore this callback is useful e.g. when creating refs dynamically in a loop or when using `.map()`\n * during the rendering of a React component).\n *\n * @return {(key: string|number) => {current: *}} The callback accepting a key and returning a ref for that key\n *                                                (the same ref for that key if a ref for that key was already created previously).\n */\nexport default function useKeyRefCallback() {\n  const mapRef = useRef({});\n  return useCallback(key => {\n    mapRef.current[key] = mapRef.current[key] || React.createRef();\n    return mapRef.current[key];\n  }, []);\n}\n"],"file":"useKeyRefCallback.js"}