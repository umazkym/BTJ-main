{"version":3,"sources":["../../../src/trap/trapHandlerForRules.js"],"names":["rulesGenerator","parseRule","Trap","trapHandlerForRules","proxyRules","trap","rules","rule","pointcut","parsedRule","addPointcutRule","hasGets","get","target","property","receiver","hasSets","set","value","updateWasSuccessful","hasApplies","apply","thisArg","argumentsList","hasConstructs","construct","newTarget"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAOA,cAAP,MAA2B,yBAA3B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA;;;;;;;AAMA,eAAe,SAASC,mBAAT,CAA6BC,UAA7B,EAAyC;AACtD,QAAMC,IAAI,GAAG,IAAIH,IAAJ,EAAb;AAEA,QAAMI,KAAK,GAAGN,cAAc,CAACI,UAAD,CAA5B;;AACA,OAAK,MAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAX,IAAiCF,KAAjC,EAAwC;AACtC,UAAMG,UAAU,GAAGR,SAAS,CAACM,IAAD,CAA5B;AACAF,IAAAA,IAAI,CAACK,eAAL,CAAqBF,QAArB,EAA+BC,UAA/B;AACD;;AAED,qEACMJ,IAAI,CAACM,OAAL,KACA;AACE;AACAC,IAAAA,GAAG,CAACC,MAAD,EAASC,QAAT,EAAmBC,QAAnB,EAA6B;AAC9B,aAAOV,IAAI,CAACO,GAAL,CAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,CAAP;AACD;;AAJH,GADA,GAOA,EARN,GASMV,IAAI,CAACW,OAAL,KACA;AACE;AACAC,IAAAA,GAAG,CAACJ,MAAD,EAASC,QAAT,EAAmBI,KAAnB,EAA0BH,QAA1B,EAAoC;AACrC,YAAMI,mBAAmB,GAAGd,IAAI,CAACY,GAAL,CAC1BJ,MAD0B,EAE1BC,QAF0B,EAG1BI,KAH0B,EAI1BH,QAJ0B,CAA5B;AAMA,aAAOI,mBAAP;AACD;;AAVH,GADA,GAaA,EAtBN,GAuBMd,IAAI,CAACe,UAAL,KACA;AACE;AACAC,IAAAA,KAAK,CAACR,MAAD,EAASS,OAAT,EAAkBC,aAAlB,EAAiC;AACpC,aAAOlB,IAAI,CAACgB,KAAL,CAAWR,MAAX,EAAmBS,OAAnB,EAA4BC,aAA5B,CAAP;AACD;;AAJH,GADA,GAOA,EA9BN,GA+BMlB,IAAI,CAACmB,aAAL,KACA;AACE;AACAC,IAAAA,SAAS,CAACZ,MAAD,EAASU,aAAT,EAAwBG,SAAxB,EAAmC;AAC1C,aAAOrB,IAAI,CAACoB,SAAL,CAAeZ,MAAf,EAAuBU,aAAvB,EAAsCG,SAAtC,CAAP;AACD;;AAJH,GADA,GAOA,EAtCN;AAwCD","sourcesContent":["/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport rulesGenerator from \"../rules/rulesGenerator\";\nimport parseRule from \"../rules/parser/parseRule\";\nimport Trap from \"./Trap\";\n\n/**\n * Generates a new trap handler object for the given rules.\n *\n * @param {Object|Array} proxyRules The proxy rules.\n * @return {Object} The new trap handler object for the given rules.\n */\nexport default function trapHandlerForRules(proxyRules) {\n  const trap = new Trap();\n\n  const rules = rulesGenerator(proxyRules);\n  for (const { rule, pointcut } of rules) {\n    const parsedRule = parseRule(rule);\n    trap.addPointcutRule(pointcut, parsedRule);\n  }\n\n  return {\n    ...(trap.hasGets()\n      ? {\n          // Trap for property access (getting) and method call.\n          get(target, property, receiver) {\n            return trap.get(target, property, receiver);\n          }\n        }\n      : {}),\n    ...(trap.hasSets()\n      ? {\n          // Trap for property access (setting).\n          set(target, property, value, receiver) {\n            const updateWasSuccessful = trap.set(\n              target,\n              property,\n              value,\n              receiver\n            );\n            return updateWasSuccessful;\n          }\n        }\n      : {}),\n    ...(trap.hasApplies()\n      ? {\n          // Trap for function call.\n          apply(target, thisArg, argumentsList) {\n            return trap.apply(target, thisArg, argumentsList);\n          }\n        }\n      : {}),\n    ...(trap.hasConstructs()\n      ? {\n          // Trap for object construction with the \"new\" operator.\n          construct(target, argumentsList, newTarget) {\n            return trap.construct(target, argumentsList, newTarget);\n          }\n        }\n      : {})\n  };\n}\n"],"file":"trapHandlerForRules.js"}