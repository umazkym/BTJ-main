{"version":3,"sources":["../../../../src/trap/executors/GetTrapExecutor.js"],"names":["TrapExecutor","reflectGet","GetTrapExecutor","executeBeforeAdvice","target","property","receiver","advice","rule","context","fn","apply","executeAroundAdvice","proceed","executeAfterAdvice","propertyValue","performUnderlyingOperation","executeProceedCallback","callback"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,eAAe,MAAMC,eAAN,SAA8BF,YAA9B,CAA2C;AACxDG,EAAAA,mBAAmB,CAAC,CAACC,MAAD,EAASC,QAAT,EAAmBC,QAAnB,CAAD,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6C;AAC9D,UAAMC,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdC,MAAAA,QAFc;AAGdC,MAAAA,QAHc;AAIdE,MAAAA;AAJc,KAAhB;AAMAD,IAAAA,MAAM,CAACG,EAAP,CAAUC,KAAV,CAAgBF,OAAhB;AACD;;AAEDG,EAAAA,mBAAmB,CAAC,CAACR,MAAD,EAASC,QAAT,EAAmBC,QAAnB,CAAD,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6CK,OAA7C,EAAsD;AACvE,UAAMJ,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdC,MAAAA,QAFc;AAGdC,MAAAA,QAHc;AAIdE,MAAAA;AAJc,KAAhB;AAMA,WAAOD,MAAM,CAACG,EAAP,CAAUC,KAAV,CAAgBF,OAAhB,EAAyB,CAACI,OAAD,CAAzB,CAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAChB,CAACV,MAAD,EAASC,QAAT,EAAmBC,QAAnB,CADgB,EAEhBC,MAFgB,EAGhBC,IAHgB,EAIhBO,aAJgB,EAKhB;AACA,UAAMN,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdC,MAAAA,QAFc;AAGdC,MAAAA,QAHc;AAIdE,MAAAA;AAJc,KAAhB;AAMAD,IAAAA,MAAM,CAACG,EAAP,CAAUC,KAAV,CAAgBF,OAAhB,EAAyB,CAACM,aAAD,CAAzB;AACD;;AAEDC,EAAAA,0BAA0B,CAAC,CAACZ,MAAD,EAASC,QAAT,EAAmBC,QAAnB,CAAD,EAA+B;AACvD,UAAMS,aAAa,GAAGd,UAAU,CAACG,MAAD,EAASC,QAAT,EAAmBC,QAAnB,CAAhC;AACA,WAAOS,aAAP;AACD;;AAEDE,EAAAA,sBAAsB,CACpB,CAACb,MAAD,EAASC,QAAT,EAAmBC,QAAnB,CADoB,EAEpBE,IAFoB,EAGpBO,aAHoB,EAIpBG,QAJoB,EAKpB;AACA,UAAMT,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdC,MAAAA,QAFc;AAGdC,MAAAA,QAHc;AAIdE,MAAAA;AAJc,KAAhB;AAMA,WAAOU,QAAQ,CAACP,KAAT,CAAeF,OAAf,EAAwB,CAACM,aAAD,CAAxB,CAAP;AACD;;AAtDuD","sourcesContent":["/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport TrapExecutor from \"./TrapExecutor\";\nimport reflectGet from \"../reflect/reflectGet\";\n\nexport default class GetTrapExecutor extends TrapExecutor {\n  executeBeforeAdvice([target, property, receiver], advice, rule) {\n    const context = {\n      target,\n      property,\n      receiver,\n      rule\n    };\n    advice.fn.apply(context);\n  }\n\n  executeAroundAdvice([target, property, receiver], advice, rule, proceed) {\n    const context = {\n      target,\n      property,\n      receiver,\n      rule\n    };\n    return advice.fn.apply(context, [proceed]);\n  }\n\n  executeAfterAdvice(\n    [target, property, receiver],\n    advice,\n    rule,\n    propertyValue\n  ) {\n    const context = {\n      target,\n      property,\n      receiver,\n      rule\n    };\n    advice.fn.apply(context, [propertyValue]);\n  }\n\n  performUnderlyingOperation([target, property, receiver]) {\n    const propertyValue = reflectGet(target, property, receiver);\n    return propertyValue;\n  }\n\n  executeProceedCallback(\n    [target, property, receiver],\n    rule,\n    propertyValue,\n    callback\n  ) {\n    const context = {\n      target,\n      property,\n      receiver,\n      rule\n    };\n    return callback.apply(context, [propertyValue]);\n  }\n}\n"],"file":"GetTrapExecutor.js"}