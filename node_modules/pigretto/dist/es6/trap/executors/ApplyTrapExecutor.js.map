{"version":3,"sources":["../../../../src/trap/executors/ApplyTrapExecutor.js"],"names":["TrapExecutor","reflectApply","withFunctionTrapExecutor","ApplyTrapExecutor","getTrapArgsArgumentsListIndex","executeBeforeAdvice","target","thisArg","argumentsList","advice","rule","context","fn","apply","executeAroundAdvice","proceed","call","executeAfterAdvice","returnValue","performUnderlyingOperation","executeProceedCallback","callback"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,wBAAT,QAAyC,uCAAzC;AAEA,eAAeA,wBAAwB,CACrC,MAAMC,iBAAN,SAAgCH,YAAhC,CAA6C;AAC3CI,EAAAA,6BAA6B,GAAG;AAC9B,WAAO,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAAC,CAACC,MAAD,EAASC,OAAT,EAAkBC,aAAlB,CAAD,EAAmCC,MAAnC,EAA2CC,IAA3C,EAAiD;AAClE,UAAMC,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdC,MAAAA,OAFc;AAGdG,MAAAA;AAHc,KAAhB;AAKAD,IAAAA,MAAM,CAACG,EAAP,CAAUC,KAAV,CAAgBF,OAAhB,EAAyBH,aAAzB;AACD;;AAEDM,EAAAA,mBAAmB,CACjB,CAACR,MAAD,EAASC,OAAT,EAAkBC,aAAlB,CADiB,EAEjBC,MAFiB,EAGjBC,IAHiB,EAIjBK,OAJiB,EAKjB;AACA,UAAMJ,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdC,MAAAA,OAFc;AAGdG,MAAAA;AAHc,KAAhB;AAKA,WAAOD,MAAM,CAACG,EAAP,CAAUI,IAAV,CAAeL,OAAf,EAAwBI,OAAxB,EAAiCF,KAAjC,CAAuCF,OAAvC,EAAgDH,aAAhD,CAAP;AACD;;AAEDS,EAAAA,kBAAkB,CAChB,CAACX,MAAD,EAASC,OAAT,EAAkBC,aAAlB,CADgB,EAEhBC,MAFgB,EAGhBC,IAHgB,EAIhBQ,WAJgB,EAKhB;AACA,UAAMP,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdC,MAAAA,OAFc;AAGdG,MAAAA;AAHc,KAAhB;AAKAD,IAAAA,MAAM,CAACG,EAAP,CAAUI,IAAV,CAAeL,OAAf,EAAwB,GAAGH,aAA3B,EAA0CK,KAA1C,CAAgDF,OAAhD,EAAyD,CAACO,WAAD,CAAzD;AACD;;AAEDC,EAAAA,0BAA0B,CAAC,CAACb,MAAD,EAASC,OAAT,EAAkBC,aAAlB,CAAD,EAAmC;AAC3D,UAAMU,WAAW,GAAGjB,YAAY,CAACK,MAAD,EAASC,OAAT,EAAkBC,aAAlB,CAAhC;AACA,WAAOU,WAAP;AACD;;AAEDE,EAAAA,sBAAsB,CACpB,CAACd,MAAD,EAASC,OAAT,EAAkBC,aAAlB,CADoB,EAEpBE,IAFoB,EAGpBQ,WAHoB,EAIpBG,QAJoB,EAKpB;AACA,UAAMV,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdC,MAAAA,OAFc;AAGdG,MAAAA,IAHc;AAIdF,MAAAA;AAJc,KAAhB;AAMA,WAAOa,QAAQ,CAACR,KAAT,CAAeF,OAAf,EAAwB,CAACO,WAAD,CAAxB,CAAP;AACD;;AA5D0C,CADR,CAAvC","sourcesContent":["/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport TrapExecutor from \"./TrapExecutor\";\nimport reflectApply from \"../reflect/reflectApply\";\nimport { withFunctionTrapExecutor } from \"./behaviours/withFunctionTrapExecutor\";\n\nexport default withFunctionTrapExecutor(\n  class ApplyTrapExecutor extends TrapExecutor {\n    getTrapArgsArgumentsListIndex() {\n      return 2;\n    }\n\n    executeBeforeAdvice([target, thisArg, argumentsList], advice, rule) {\n      const context = {\n        target,\n        thisArg,\n        rule,\n      };\n      advice.fn.apply(context, argumentsList);\n    }\n\n    executeAroundAdvice(\n      [target, thisArg, argumentsList],\n      advice,\n      rule,\n      proceed\n    ) {\n      const context = {\n        target,\n        thisArg,\n        rule,\n      };\n      return advice.fn.call(context, proceed).apply(context, argumentsList);\n    }\n\n    executeAfterAdvice(\n      [target, thisArg, argumentsList],\n      advice,\n      rule,\n      returnValue\n    ) {\n      const context = {\n        target,\n        thisArg,\n        rule,\n      };\n      advice.fn.call(context, ...argumentsList).apply(context, [returnValue]);\n    }\n\n    performUnderlyingOperation([target, thisArg, argumentsList]) {\n      const returnValue = reflectApply(target, thisArg, argumentsList);\n      return returnValue;\n    }\n\n    executeProceedCallback(\n      [target, thisArg, argumentsList],\n      rule,\n      returnValue,\n      callback\n    ) {\n      const context = {\n        target,\n        thisArg,\n        rule,\n        argumentsList,\n      };\n      return callback.apply(context, [returnValue]);\n    }\n  }\n);\n"],"file":"ApplyTrapExecutor.js"}