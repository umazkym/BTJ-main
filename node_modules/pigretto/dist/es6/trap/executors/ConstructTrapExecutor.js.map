{"version":3,"sources":["../../../../src/trap/executors/ConstructTrapExecutor.js"],"names":["TrapExecutor","reflectConstruct","withFunctionTrapExecutor","ConstructTrapExecutor","getTrapArgsArgumentsListIndex","executeBeforeAdvice","target","argumentsList","newTarget","advice","rule","context","fn","apply","executeAroundAdvice","proceed","call","executeAfterAdvice","instance","performUnderlyingOperation","executeProceedCallback","callback"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,SAASC,wBAAT,QAAyC,uCAAzC;AAEA,eAAeA,wBAAwB,CACrC,MAAMC,qBAAN,SAAoCH,YAApC,CAAiD;AAC/CI,EAAAA,6BAA6B,GAAG;AAC9B,WAAO,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAAC,CAACC,MAAD,EAASC,aAAT,EAAwBC,SAAxB,CAAD,EAAqCC,MAArC,EAA6CC,IAA7C,EAAmD;AACpE,UAAMC,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdE,MAAAA,SAFc;AAGdE,MAAAA;AAHc,KAAhB;AAKAD,IAAAA,MAAM,CAACG,EAAP,CAAUC,KAAV,CAAgBF,OAAhB,EAAyBJ,aAAzB;AACD;;AAEDO,EAAAA,mBAAmB,CACjB,CAACR,MAAD,EAASC,aAAT,EAAwBC,SAAxB,CADiB,EAEjBC,MAFiB,EAGjBC,IAHiB,EAIjBK,OAJiB,EAKjB;AACA,UAAMJ,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdE,MAAAA,SAFc;AAGdE,MAAAA;AAHc,KAAhB;AAKA,WAAOD,MAAM,CAACG,EAAP,CAAUI,IAAV,CAAeL,OAAf,EAAwBI,OAAxB,EAAiCF,KAAjC,CAAuCF,OAAvC,EAAgDJ,aAAhD,CAAP;AACD;;AAEDU,EAAAA,kBAAkB,CAChB,CAACX,MAAD,EAASC,aAAT,EAAwBC,SAAxB,CADgB,EAEhBC,MAFgB,EAGhBC,IAHgB,EAIhBQ,QAJgB,EAKhB;AACA,UAAMP,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdE,MAAAA,SAFc;AAGdE,MAAAA;AAHc,KAAhB;AAKAD,IAAAA,MAAM,CAACG,EAAP,CAAUI,IAAV,CAAeL,OAAf,EAAwB,GAAGJ,aAA3B,EAA0CM,KAA1C,CAAgDF,OAAhD,EAAyD,CAACO,QAAD,CAAzD;AACD;;AAEDC,EAAAA,0BAA0B,CAAC,CAACb,MAAD,EAASC,aAAT,EAAwBC,SAAxB,CAAD,EAAqC;AAC7D,UAAMU,QAAQ,GAAGjB,gBAAgB,CAACK,MAAD,EAASC,aAAT,EAAwBC,SAAxB,CAAjC;AACA,WAAOU,QAAP;AACD;;AAEDE,EAAAA,sBAAsB,CACpB,CAACd,MAAD,EAASC,aAAT,EAAwBC,SAAxB,CADoB,EAEpBE,IAFoB,EAGpBQ,QAHoB,EAIpBG,QAJoB,EAKpB;AACA,UAAMV,OAAO,GAAG;AACdL,MAAAA,MADc;AAEdE,MAAAA,SAFc;AAGdE,MAAAA,IAHc;AAIdH,MAAAA;AAJc,KAAhB;AAMA,WAAOc,QAAQ,CAACR,KAAT,CAAeF,OAAf,EAAwB,CAACO,QAAD,CAAxB,CAAP;AACD;;AA5D8C,CADZ,CAAvC","sourcesContent":["/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport TrapExecutor from \"./TrapExecutor\";\nimport reflectConstruct from \"../reflect/reflectConstruct\";\nimport { withFunctionTrapExecutor } from \"./behaviours/withFunctionTrapExecutor\";\n\nexport default withFunctionTrapExecutor(\n  class ConstructTrapExecutor extends TrapExecutor {\n    getTrapArgsArgumentsListIndex() {\n      return 1;\n    }\n\n    executeBeforeAdvice([target, argumentsList, newTarget], advice, rule) {\n      const context = {\n        target,\n        newTarget,\n        rule,\n      };\n      advice.fn.apply(context, argumentsList);\n    }\n\n    executeAroundAdvice(\n      [target, argumentsList, newTarget],\n      advice,\n      rule,\n      proceed\n    ) {\n      const context = {\n        target,\n        newTarget,\n        rule,\n      };\n      return advice.fn.call(context, proceed).apply(context, argumentsList);\n    }\n\n    executeAfterAdvice(\n      [target, argumentsList, newTarget],\n      advice,\n      rule,\n      instance\n    ) {\n      const context = {\n        target,\n        newTarget,\n        rule,\n      };\n      advice.fn.call(context, ...argumentsList).apply(context, [instance]);\n    }\n\n    performUnderlyingOperation([target, argumentsList, newTarget]) {\n      const instance = reflectConstruct(target, argumentsList, newTarget);\n      return instance;\n    }\n\n    executeProceedCallback(\n      [target, argumentsList, newTarget],\n      rule,\n      instance,\n      callback\n    ) {\n      const context = {\n        target,\n        newTarget,\n        rule,\n        argumentsList,\n      };\n      return callback.apply(context, [instance]);\n    }\n  }\n);\n"],"file":"ConstructTrapExecutor.js"}