{"version":3,"sources":["../../../src/pointcuts/PropertyGettingPointcut.js"],"names":["Pointcut","BeforeAdvice","AfterAdvice","AroundAdvice","PropertyGettingPointcut","before","adviceFn","advices","push","after","around"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA,eAAe,MAAMC,uBAAN,SAAsCJ,QAAtC,CAA+C;AAC5D;;;;;;AAMAK,EAAAA,MAAM,CAACC,QAAD,EAAW;AACf,SAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAIP,YAAJ,CAAiBK,QAAjB,CAAlB;AACA,WAAO,IAAP;AACD;AAED;;;;;;;;;AAOAG,EAAAA,KAAK,CAACH,QAAD,EAAW;AACd,SAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAIN,WAAJ,CAAgBI,QAAhB,CAAlB;AACA,WAAO,IAAP;AACD;AAED;;;;;;;;;;;;AAUAI,EAAAA,MAAM,CAACJ,QAAD,EAAW;AACf,SAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAIL,YAAJ,CAAiBG,QAAjB,CAAlB;AACA,WAAO,IAAP;AACD;;AArC2D","sourcesContent":["/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport Pointcut from \"./Pointcut\";\nimport BeforeAdvice from \"../advices/BeforeAdvice\";\nimport AfterAdvice from \"../advices/AfterAdvice\";\nimport AroundAdvice from \"../advices/AroundAdvice\";\n\nexport default class PropertyGettingPointcut extends Pointcut {\n  /**\n   * Register a before advice for this pointcut.\n   *\n   * @param {Function} adviceFn The advice function. A function to execute before getting a property.\n   * @return {PropertyGettingPointcut} This pointcut (fluent interface).\n   */\n  before(adviceFn) {\n    this.advices.push(new BeforeAdvice(adviceFn));\n    return this;\n  }\n\n  /**\n   * Register an after advice for this pointcut.\n   *\n   * @param {Function} adviceFn The advice function.\n   *                            A function which will receive the current value of the property.\n   * @return {PropertyGettingPointcut} This pointcut (fluent interface).\n   */\n  after(adviceFn) {\n    this.advices.push(new AfterAdvice(adviceFn));\n    return this;\n  }\n\n  /**\n   * Register an around advice for this pointcut.\n   *\n   * @param {Function} adviceFn The advice function. A higher-order function which will receive the \"proceed\"\n   *                            function as parameter and which MUST return a function to execute before getting a property.\n   *                            If the advice function proceeds, the callback given to \"proceed\" will receive\n   *                            the value of the property to return to the caller or may return another value\n   *                            to return to the caller instead of the one passed as argument.\n   * @return {PropertyGettingPointcut} This pointcut (fluent interface).\n   */\n  around(adviceFn) {\n    this.advices.push(new AroundAdvice(adviceFn));\n    return this;\n  }\n}\n"],"file":"PropertyGettingPointcut.js"}