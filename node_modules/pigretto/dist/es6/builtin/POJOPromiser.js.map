{"version":3,"sources":["../../../src/builtin/POJOPromiser.js"],"names":["pigretto","get","queueTupleProp","Symbol","dataProp","dummyNoOp","POJOPromiser","obj","mutateTargetOnSettledPromiseQueue","originalTarget","target","that","rules","around","property","prop","queuedProp","queuedPromise","promise","then","data","Promise","resolve","Object","assign","bind","pigrettarget"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport pigretto from \"../pigretto\";\nimport get from \"../pointcuts/shorthands/get\";\n\n/**\n * @type {Symbol}\n */\nconst queueTupleProp = Symbol(\"queueTupleProp\");\n\n/**\n * @type {Symbol}\n */\nconst dataProp = Symbol(\"dataProp\");\n\n/**\n * @type {Function}\n */\nconst dummyNoOp = () => {\n  // Just a dummy no-op function. Required when the Proxy API is polyfilled with proxy-polyfill (https://github.com/GoogleChrome/proxy-polyfill/)\n};\n\n/**\n * Builtin function using pigretto's API to create a POJO promiser,\n * i.e. a proxy object with syntactic sugar which lets creating a queue of properties to resolve\n * and resolves to an object with those same properties and their respective resolved values.\n *\n * @see https://gist.github.com/jasuperior/5d339f9c2572b3bb52d487de4086a3b2\n *\n * @param {Object} obj A POJO object where each property refers to a value to use as is or to a promise\n *                     resolving to the value to use for that property.\n * @param {Object} options Options.\n * @param {boolean} [options.mutateTargetOnSettledPromiseQueue] Whether or not to mutate the original given \"obj\" POJO object\n *                                                              with the resolved values or not (defaults to false,\n *                                                              i.e. it does not mutate the original \"obj\" POJO object).\n * @return {Proxy} A new proxy object for the given target which supports this builtin feature.\n */\nexport default function POJOPromiser(\n  obj,\n  { mutateTargetOnSettledPromiseQueue = false } = {}\n) {\n  const originalTarget = obj;\n\n  // This is needed because the Proxy API may be polyfilled with proxy-polyfill (https://github.com/GoogleChrome/proxy-polyfill/).\n  // Cloning \"obj\" allows setting properties on the target clone.\n  const target = {\n    ...obj,\n  };\n\n  const that = {\n    [queueTupleProp]: void 0,\n    [dataProp]: {},\n  };\n  const rules = {\n    [\"/.?/\"]: get().around(function () {\n      const { property: prop, target } = this;\n\n      if (prop === \"then\" && that[queueTupleProp]) {\n        // If \"then\" is accessed, and there is something in the queue.\n        const [queuedProp, queuedPromise] = that[queueTupleProp];\n        const promise = queuedPromise.then(data => {\n          const obj = that[dataProp]; // Resolved data from last promise.\n          obj[queuedProp] = data;\n          return new Promise(resolve => {\n            that[dataProp] = {}; // Erase data.\n            that[queueTupleProp] = void 0; // Clear queue.\n            resolve(obj); // Resolve promise queue.\n            if (obj && mutateTargetOnSettledPromiseQueue) {\n              // Assign resolved values to the original target, so that properties which value is a promise will be replaced with the resolved value.\n              Object.assign(originalTarget, obj);\n            }\n          });\n        });\n        const then = promise.then.bind(promise);\n        return then;\n      }\n\n      let promise;\n\n      if (!(target[prop] instanceof Promise) && prop !== \"then\") {\n        // If the prop is not \"then\" or a promise, i.e. it is a real value.\n        if (that[queueTupleProp]) {\n          // If there is a queue.\n          const [queuedProp, queuedPromise] = that[queueTupleProp];\n          const obj = that[dataProp];\n          promise = queuedPromise.then(data => {\n            // Resolve last promise.\n            obj[queuedProp] = data;\n            return Promise.resolve(target[prop]);\n          });\n        } else {\n          // Otherwise, simply create a new promise with value.\n          that[dataProp] = {};\n          promise = Promise.resolve(target[prop]);\n        }\n      }\n\n      if (that[queueTupleProp]) {\n        // If it is a promise and there is a queue.\n        const [queuedProp, queuedPromise] = that[queueTupleProp];\n        const obj = that[dataProp];\n        promise = queuedPromise.then(data => {\n          // Resolve last promise.\n          obj[queuedProp] = data;\n          return target[prop];\n        });\n      } else if (!promise) {\n        // target[prop] is of course a promise here (invariant).\n        that[dataProp] = {};\n        promise = target[prop];\n      }\n\n      that[queueTupleProp] = [prop, promise]; // Save the promise and the property in the queue.\n      // All alternations ensure that no matter what the value, a promise which must be resolved is always given.\n      target.then = dummyNoOp;\n      const pigrettarget = pigretto(target, rules);\n      return pigrettarget;\n    }),\n  };\n  target.then = dummyNoOp;\n  const pigrettarget = pigretto(target, rules);\n  return pigrettarget;\n}\n"],"file":"POJOPromiser.js"}