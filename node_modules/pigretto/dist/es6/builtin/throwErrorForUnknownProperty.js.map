{"version":3,"sources":["../../../src/builtin/throwErrorForUnknownProperty.js"],"names":["pigretto","get","set","prototypeChainProperties","typeToStr","throwErrorForUnknownProperty","target","dynamic","errorToThrow","prototypeChainPropertiesOptions","regex","map","mapProperties","props","reduce","acc","prop","assertFn","propertyName","property","targetTypeToStr","defaultErrorMessage","Error","pigrettarget","before"],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,SAASC,wBAAT,EAAmCC,SAAnC,QAAoD,QAApD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,eAAe,SAASC,4BAAT,CACbC,MADa,EAEb,OAII,EANS,EAOb;AAAA,MALA;AACEC,IAAAA,OAAO,GAAG,IADZ;AAEEC,IAAAA,YAAY,GAAG;AAFjB,GAKA;AAAA,MAFKC,+BAEL;;AACA,QAAMC,KAAK,GAAG,IAAd;AACA,MAAIC,GAAG,GAAG,EAAV;;AACA,QAAMC,aAAa,GAAG,MAAM;AAC1B,UAAMC,KAAK,GAAGV,wBAAwB,CACpCG,MADoC,EAEpCG,+BAFoC,CAAtC;AAIAE,IAAAA,GAAG,GAAGE,KAAK,CAACC,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAe,EAAED,GAAG,CAACC,IAAD,CAAH,GAAY,IAAd,KAAuBD,GAAnD,EAAwD,EAAxD,CAAN;AACD,GAND;;AAOA,GAACR,OAAD,IAAYK,aAAa,EAAzB;;AACA,QAAMK,QAAQ,GAAG,YAAY;AAC3B,UAAMC,YAAY,GAAG,KAAKC,QAA1B;AACA,UAAMC,eAAe,GAAGhB,SAAS,CAACE,MAAD,CAAjC;AACA,UAAMe,mBAAmB,GAAI,+BAA8BH,YAAa,eAAcE,eAAgB,GAAtG;AACAb,IAAAA,OAAO,IAAIK,aAAa,EAAxB;;AACA,QAAI,CAACD,GAAG,CAACO,YAAD,CAAR,EAAwB;AACtBV,MAAAA,YAAY,GAAGA,YAAY,GACvB,OAAOA,YAAP,KAAwB,UAAxB,GACEA,YAAY,CAAC;AACXF,QAAAA,MADW;AAEXY,QAAAA,YAFW;AAGXE,QAAAA,eAHW;AAIXC,QAAAA;AAJW,OAAD,CADd,GAOEb,YARqB,GASvB,IAAIc,KAAJ,CAAUD,mBAAV,CATJ;AAUA,YAAMb,YAAN;AACD;AACF,GAlBD;;AAmBA,QAAMe,YAAY,GAAGvB,QAAQ,CAACM,MAAD,EAAS,CACpC,CAACI,KAAD,EAAQT,GAAG,GAAGuB,MAAN,CAAaP,QAAb,CAAR,CADoC,EAEpC,CAACP,KAAD,EAAQR,GAAG,GAAGsB,MAAN,CAAaP,QAAb,CAAR,CAFoC,CAAT,CAA7B;AAIA,SAAOM,YAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport pigretto from \"../pigretto\";\nimport get from \"../pointcuts/shorthands/get\";\nimport set from \"../pointcuts/shorthands/set\";\nimport { prototypeChainProperties, typeToStr } from \"js-utl\";\n\n/**\n * Builtin function using pigretto's API to throw an error when an unknown property is accessed on the given target\n * (both for read and write operations).\n *\n * @param {Object} target The target object.\n * @param {Object} options Options.\n * @param {boolean} [options.dynamic] Whether or not to check against the current properties of the target on each property access (dynamic, default).\n *                                    If set to false, then only the properties of the target object at the time this builtin function is called will be\n *                                    treated as known and used for the check when determining if a property is unknown.\n * @param {?Error|Function} [options.errorToThrow] The error to throw or null (default) or a function returning an error instance to throw.\n *                                                 If null, a default error will be thrown when trying to access an unknown property.\n *                                                 If a function is given, the function will receive an object with the following properties as parameter:\n *\n *                                                     - target (Object): The target object;\n *                                                     - propertyName (string): The name of the unknown property;\n *                                                     - targetTypeToStr (string): The type of the target (e.g. \"[object Object]\");\n *                                                     - defaultErrorMessage (string): A default error message which can be used for the custom error;\n *\n * @param {Object} [options.prototypeChainPropertiesOptions] Further options passed to the \"prototypeChainProperties\" function of js-utl (used internally).\n *                                                           See the \"prototypeChainProperties\" function of the js-utl package (https://github.com/tonix-tuft/js-utl)\n *                                                           for the available options.\n * @return {Proxy} A new proxy object for the given target which supports this builtin feature.\n */\nexport default function throwErrorForUnknownProperty(\n  target,\n  {\n    dynamic = true,\n    errorToThrow = null,\n    ...prototypeChainPropertiesOptions\n  } = {}\n) {\n  const regex = /.?/;\n  let map = {};\n  const mapProperties = () => {\n    const props = prototypeChainProperties(\n      target,\n      prototypeChainPropertiesOptions\n    );\n    map = props.reduce((acc, prop) => !(acc[prop] = true) || acc, {});\n  };\n  !dynamic && mapProperties();\n  const assertFn = function () {\n    const propertyName = this.property;\n    const targetTypeToStr = typeToStr(target);\n    const defaultErrorMessage = `Accessing unknown property \"${propertyName}\" of object ${targetTypeToStr}.`;\n    dynamic && mapProperties();\n    if (!map[propertyName]) {\n      errorToThrow = errorToThrow\n        ? typeof errorToThrow === \"function\"\n          ? errorToThrow({\n              target,\n              propertyName,\n              targetTypeToStr,\n              defaultErrorMessage,\n            })\n          : errorToThrow\n        : new Error(defaultErrorMessage);\n      throw errorToThrow;\n    }\n  };\n  const pigrettarget = pigretto(target, [\n    [regex, get().before(assertFn)],\n    [regex, set().before(assertFn)],\n  ]);\n  return pigrettarget;\n}\n"],"file":"throwErrorForUnknownProperty.js"}