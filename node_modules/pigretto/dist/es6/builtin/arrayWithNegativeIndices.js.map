{"version":3,"sources":["../../../src/builtin/arrayWithNegativeIndices.js"],"names":["arrayWithNegativeIndices","array","wrap","Proxy","get","target","propKey","numberPropKey","Number","isNaN","isInteger","absNumberPropKey","Math","abs","length","String"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;AAYA,eAAe,SAASA,wBAAT,CAAkCC,KAAlC,EAAyC;AAAEC,EAAAA,IAAI,GAAG;AAAT,IAAkB,EAA3D,EAA+D;AAC5E,SAAO,IAAIC,KAAJ,CAAUF,KAAV,EAAiB;AACtBG,IAAAA,GAAG,EAAE,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAC9B,UAAIC,aAAa,GAAGC,MAAM,CAACF,OAAD,CAA1B;;AACA,UACE,CAACE,MAAM,CAACC,KAAP,CAAaF,aAAb,CAAD,IACAC,MAAM,CAACE,SAAP,CAAiBH,aAAjB,CADA,IAEAA,aAAa,GAAG,CAHlB,EAIE;AACA,cAAMI,gBAAgB,GAAGC,IAAI,CAACC,GAAL,CAASN,aAAT,CAAzB;;AACA,YAAIL,IAAI,IAAIS,gBAAgB,IAAIN,MAAM,CAACS,MAAvC,EAA+C;AAC7CP,UAAAA,aAAa,GAAGF,MAAM,CAACS,MAAP,GAAiBH,gBAAgB,GAAGN,MAAM,CAACS,MAA3D;AACAR,UAAAA,OAAO,GAAGS,MAAM,CAACR,aAAa,KAAKF,MAAM,CAACS,MAAzB,GAAkC,CAAlC,GAAsCP,aAAvC,CAAhB;AACD;AACF;;AACD,aAAOF,MAAM,CAACC,OAAD,CAAb;AACD;AAfqB,GAAjB,CAAP;AAiBD","sourcesContent":["/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Builtin function using pigretto's API to create an array which allows the usage of negative indices\n * to retrieve its data, where -1 indicates the last element of the array (same as `array.length - 1`).\n *\n * @param {Array} array An array to use as the target object for this builtin.\n * @param {Object} options Options.\n * @param {boolean} [options.wrap] Whether or not to wrap if the negative index is greater than the length of the array.\n *                                 Defaults to true, in which case an array like `arrayWithNegativeIndices(['a', 'b', 'c'])[-5]`\n *                                 will wrap and return 'b', even though `Math.abs(-5) > ['a', 'b', 'c'].length`.\n *                                 If this option were set to false, then undefined would be returned for `arrayWithNegativeIndices(['a', 'b', 'c'])[-5]`.\n * @return {Proxy} The proxy object for the given array.\n */\nexport default function arrayWithNegativeIndices(array, { wrap = true } = {}) {\n  return new Proxy(array, {\n    get: function (target, propKey) {\n      let numberPropKey = Number(propKey);\n      if (\n        !Number.isNaN(numberPropKey) &&\n        Number.isInteger(numberPropKey) &&\n        numberPropKey < 0\n      ) {\n        const absNumberPropKey = Math.abs(numberPropKey);\n        if (wrap || absNumberPropKey <= target.length) {\n          numberPropKey = target.length - (absNumberPropKey % target.length);\n          propKey = String(numberPropKey === target.length ? 0 : numberPropKey);\n        }\n      }\n      return target[propKey];\n    },\n  });\n}\n"],"file":"arrayWithNegativeIndices.js"}