{"version":3,"sources":["../../../src/modules/constraint.js"],"names":["filterInt","str","filtered","replace","length","filterFloat","regex"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AAC7B,MAAIC,QAAQ,GAAGD,GAAG,CAACE,OAAJ,CAAY,SAAZ,EAAuB,EAAvB,CAAf;AACAD,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,cAAjB,EAAiC,IAAjC,CAAX;AACAD,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,QAAjB,EAA2B,GAA3B,CAAX;;AACA,MAAIF,GAAG,IAAIC,QAAQ,CAACE,MAAhB,IAA0BH,GAAG,CAAC,CAAD,CAAH,KAAW,GAAzC,EAA8C;AAC5CC,IAAAA,QAAQ,GAAI,IAAGA,QAAS,EAAxB;AACD;;AACD,SAAOA,QAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,WAAT,CAAqBJ,GAArB,EAA0B;AAC/B,MAAIC,QAAQ,GAAGD,GAAG,CAACE,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,CAAf;AACA,QAAMG,KAAK,GAAG,WAAd;AACA,QAAMH,OAAO,GAAG,IAAhB;;AACA,KAAG;AACDD,IAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiBG,KAAjB,EAAwBH,OAAxB,CAAX;AACD,GAFD,QAESD,QAAQ,IAAIA,QAAQ,CAACC,OAAT,CAAiBG,KAAjB,EAAwBH,OAAxB,CAFrB;;AAGAD,EAAAA,QAAQ,KAAK,GAAb,GAAoBA,QAAQ,GAAG,IAA/B,GAAuCA,QAAvC;AACAA,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,cAAjB,EAAiC,IAAjC,CAAX;AACAD,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,aAAjB,EAAgC,KAAhC,CAAX;;AACA,MAAIF,GAAG,IAAIC,QAAQ,CAACE,MAAhB,IAA0BH,GAAG,CAAC,CAAD,CAAH,KAAW,GAAzC,EAA8C;AAC5CC,IAAAA,QAAQ,GAAI,IAAGA,QAAS,EAAxB;AACD;;AACD,SAAOA,QAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Constraints and filtering utility functions.\n */\n\n/**\n * Filters the given string so that it only includes digit (0-9)\n * and an optional leading sign (\"+\", which is removed if present, or \"-\"),\n * i.e. represents a valid integer parsable with \"Number.parseInt()\".\n *\n * @param {string} str The input string.\n * @return {string} The valid input string or an empty string if there isn't any digit.\n */\nexport function filterInt(str) {\n  let filtered = str.replace(/[^0-9]/g, \"\");\n  filtered = filtered.replace(/^[0]+([1-9])/, \"$1\");\n  filtered = filtered.replace(/^[0]+$/, \"0\");\n  if (str && filtered.length && str[0] === \"-\") {\n    filtered = `-${filtered}`;\n  }\n  return filtered;\n}\n\n/**\n * Filters the given string so that it only includes digits (0-9), a decimal separator (\".\" character)\n * and an optional leading sign (\"+\", which is removed if present, or \"-\"),\n * i.e. represents a valid float parsable with \"Number.parseFloat()\".\n *\n * @param {string} str The input string.\n * @return {string} The valid float string or an empty string if there isn't any digit or decimal separator.\n *                  If there isn't any digit in the input string and there is a decimal separator (\".\" character),\n *                  the returned string will be \"0.\", i.e. a parsable \"0.\" string.\n */\nexport function filterFloat(str) {\n  let filtered = str.replace(/[^0-9.]/g, \"\");\n  const regex = /(\\..*)\\./g;\n  const replace = \"$1\";\n  do {\n    filtered = filtered.replace(regex, replace);\n  } while (filtered != filtered.replace(regex, replace));\n  filtered === \".\" ? (filtered = \"0.\") : filtered;\n  filtered = filtered.replace(/^[0]+([1-9])/, \"$1\");\n  filtered = filtered.replace(/^[0]+($|\\.)/, \"0$1\");\n  if (str && filtered.length && str[0] === \"-\") {\n    filtered = `-${filtered}`;\n  }\n  return filtered;\n}\n"],"file":"constraint.js"}