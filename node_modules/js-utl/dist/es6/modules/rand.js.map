{"version":3,"sources":["../../../src/modules/rand.js"],"names":["randomStr","length","result","characters","charactersLength","i","charAt","Math","floor","random","randomInt","min","max","Number","MAX_SAFE_INTEGER","ceil","randomFloat","randInt","randomDifferentFromValue","value","ret","noncanonicalUUIDCounter","uuid","toString","noncanonicalUUID","UUID","shuffleArrayRandomly","array","temporaryValue","randomIndex","randomArrayShuffle","Object","keys","map","randomString","substr"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Utility functions providing random functionality.\n */\n\n/**\n * Generates a random string.\n *\n * @param {number} length The length of the string to return.\n * @return {string} The random string.\n */\nexport function randomStr(length) {\n  let result = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\n/**\n * Generates a random int between min and max (both included).\n *\n * @param {number} min Min int value.\n * @param {number} max Max int value.\n * @return {number} A random int between min and max.\n */\nexport function randomInt(min = 0, max = Number.MAX_SAFE_INTEGER) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Generates a random float between min and max integers (both included).\n *\n * @param {number} min Min int value.\n * @param {number} max Max int value.\n * @return {number} A random float between min and max.\n */\nexport function randomFloat(min = 0, max = 562949953421311) {\n  const randInt = randomInt(min, max);\n  if (randInt >= max) {\n    return randInt;\n  }\n  return randInt + Math.random();\n}\n\n/**\n * Returns a random float (using \"Math.random()\") not equal to the given value.\n *\n * @param {number} value The given value.\n * @return {number} A random float not equal to value.\n */\nexport function randomDifferentFromValue(value) {\n  let ret = Math.random();\n  while (value == ret) {\n    ret = Math.random();\n  }\n  return ret;\n}\n\n/**\n * @type {Array}\n */\nlet noncanonicalUUIDCounter = 1;\n\n/**\n * Generates a new UUID.\n *\n * @see https://github.com/tastejs/todomvc/blob/gh-pages/examples/react/js/utils.js\n *\n * @return {string} The UUID.\n */\nexport function uuid() {\n  let i, random;\n  let uuid = \"\";\n\n  for (i = 0; i < 32; i++) {\n    random = (Math.random() * 16) | 0;\n    if (i === 8 || i === 12 || i === 16 || i === 20) {\n      uuid += \"-\";\n    }\n    uuid += (i === 12 ? 4 : i === 16 ? (random & 3) | 8 : random).toString(16);\n  }\n\n  return uuid;\n}\n\n/**\n * Generates a new noncanonical UUID. This noncanonical UUID has a further\n * int prefixed by \"-\" which is concatenated to a canonical UUID at the end\n * of the canonical UUID before returning this noncanonical UUID.\n * The int starts with 1 and increments every time this function is called.\n *\n * @return {string} A noncanonical UUID.\n */\nexport function noncanonicalUUID() {\n  const UUID = uuid();\n  return UUID + \"-\" + noncanonicalUUIDCounter++;\n}\n\n/**\n * Shuffles an array randomly modifing the given array.\n *\n * @param {Array} array The input array.\n * @return {Array} A reference to the same array given as input,\n *                 but with its elements randomly shuffled.\n */\nconst shuffleArrayRandomly = array => {\n  let i = array.length,\n    temporaryValue,\n    randomIndex;\n  while (0 !== i) {\n    randomIndex = Math.floor(Math.random() * i);\n    i--;\n    temporaryValue = array[i];\n    array[i] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\n/**\n * Returns an array with the elements of the given array randomly shuffled.\n *\n * @param {Array} array An array.\n * @return {Array} A new array with the same elements of the input array, but randomly shuffled.\n */\nexport function randomArrayShuffle(array) {\n  return shuffleArrayRandomly(Object.keys(array)).map(i => array[i]);\n}\n\n/**\n * Generates a random string.\n *\n * @return {string} A random string.\n */\nexport const randomString = () => Math.random().toString(36).substr(2);\n"],"file":"rand.js"}