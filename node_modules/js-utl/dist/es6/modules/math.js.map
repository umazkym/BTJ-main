{"version":3,"sources":["../../../src/modules/math.js"],"names":["round","number","precision","factor","Math","sum","numbers","reduce","carry","num","intDiv","divideBy","floor","isEven","isOdd","proportion","sourceFrom","sourceTo","destFrom","destTo","sourceValue"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAeC,MAAf,EAAuBC,SAAS,GAAG,CAAnC,EAAsC;AAC3C,QAAMC,MAAM,YAAG,EAAH,EAASD,SAAT,CAAZ;AACA,SAAOE,IAAI,CAACJ,KAAL,CAAWC,MAAM,GAAGE,MAApB,IAA8BA,MAArC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,GAAT,CAAa,GAAGC,OAAhB,EAAyB;AAC9B,SAAOA,OAAO,CAACC,MAAR,CAAe,CAACC,KAAD,EAAQC,GAAR,KAAgBD,KAAK,GAAGC,GAAvC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBD,GAAhB,EAAqBE,QAArB,EAA+B;AACpC,SAAOP,IAAI,CAACQ,KAAL,CAAWH,GAAG,GAAGE,QAAjB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,MAAT,CAAgBJ,GAAhB,EAAqB;AAC1B,SAAOA,GAAG,GAAG,CAAN,KAAY,CAAnB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,KAAT,CAAeL,GAAf,EAAoB;AACzB,SAAO,CAACI,MAAM,CAACJ,GAAD,CAAd;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,UAAU,GAAG,CAAC,CAACC,UAAD,EAAaC,QAAb,CAAD,KAA4B,CAAC,CACrDC,QADqD,EAErDC,MAFqD,CAAD,KAGhDC,WAAW,IACf,CAACA,WAAW,GAAGJ,UAAf,KAA8B,CAACG,MAAM,GAAGD,QAAV,KAAuBD,QAAQ,GAAGD,UAAlC,CAA9B,IACAE,QALK","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Mathematical utility functions.\n */\n\n/**\n * Rounds a number.\n *\n * @param {number} number The number to round.\n * @param {number} precision The decimal precision.\n * @return {number} The rounded number.\n */\nexport function round(number, precision = 0) {\n  const factor = 10 ** precision;\n  return Math.round(number * factor) / factor;\n}\n\n/**\n * Sums two or more numbers.\n *\n * @param {...number} numbers The numbers to sum.\n * @return {number} The sum.\n */\nexport function sum(...numbers) {\n  return numbers.reduce((carry, num) => carry + num);\n}\n\n/**\n * Integer division (without decimal part).\n *\n * @param {number} num A number.\n * @param {number} divideBy The number by which to divide \"num\".\n * @return {number} The result of the integer division.\n */\nexport function intDiv(num, divideBy) {\n  return Math.floor(num / divideBy);\n}\n\n/**\n * Tests if a number is even.\n *\n * @param {number} num A number.\n * @return {boolean} True if even, false if odd.\n */\nexport function isEven(num) {\n  return num % 2 === 0;\n}\n\n/**\n * Tests if a number is odd.\n *\n * @param {number} num A number.\n * @return {boolean} True if odd, false if even.\n */\nexport function isOdd(num) {\n  return !isEven(num);\n}\n\n/**\n * Converts a source value of a source range to a value that is proportional\n * in another destination range.\n *\n * @param {number[]} sourceTuple The source range tuple, i.e. a tuple of two values, the starting value of the range at index 0 and the ending value of the range at index 1,\n *                               respectively.\n *                               This function assumes that both the starting and ending values are positive numbers (the starting value can be 0).\n * @return {(destRange: number[]) => (sourceValue: number) => number} A function receiving the destination range tuple as argument (having the same shape as the source range)\n *                                                                    returning a function taking the source value as argument returning the value proportional\n *                                                                    in the destination range.\n */\nexport const proportion = ([sourceFrom, sourceTo]) => ([\n  destFrom,\n  destTo,\n]) => sourceValue =>\n  (sourceValue - sourceFrom) * ((destTo - destFrom) / (sourceTo - sourceFrom)) +\n  destFrom;\n"],"file":"math.js"}