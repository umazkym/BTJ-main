{"version":3,"sources":["../../../src/modules/google.js"],"names":["googleMapBestZoomLevelFromBounds","bounds","mapDim","WORLD_DIM","height","width","ZOOM_MAX","latRad","lat","sin","Math","PI","radX2","log","max","min","zoom","mapPx","worldPx","fraction","floor","LN2","ne","getNorthEast","sw","getSouthWest","latFraction","lngDiff","lng","lngFraction","latZoom","lngZoom"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gCAAT,CAA0CC,MAA1C,EAAkDC,MAAlD,EAA0D;AAC/D,QAAMC,SAAS,GAAG;AAAEC,IAAAA,MAAM,EAAE,GAAV;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAAlB;AACA,QAAMC,QAAQ,GAAG,EAAjB;;AAEA,WAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAUD,GAAG,GAAGE,IAAI,CAACC,EAAZ,GAAkB,GAA3B,CAAZ;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACG,GAAL,CAAS,CAAC,IAAIJ,GAAL,KAAa,IAAIA,GAAjB,CAAT,IAAkC,CAAhD;AACA,WAAOC,IAAI,CAACI,GAAL,CAASJ,IAAI,CAACK,GAAL,CAASH,KAAT,EAAgBF,IAAI,CAACC,EAArB,CAAT,EAAmC,CAACD,IAAI,CAACC,EAAzC,IAA+C,CAAtD;AACD;;AAED,WAASK,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AACtC,WAAOT,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACG,GAAL,CAASI,KAAK,GAAGC,OAAR,GAAkBC,QAA3B,IAAuCT,IAAI,CAACW,GAAvD,CAAP;AACD;;AAED,QAAMC,EAAE,GAAGrB,MAAM,CAACsB,YAAP,EAAX;AACA,QAAMC,EAAE,GAAGvB,MAAM,CAACwB,YAAP,EAAX;AAEA,QAAMC,WAAW,GAAG,CAACnB,MAAM,CAACe,EAAE,CAACd,GAAH,EAAD,CAAN,GAAmBD,MAAM,CAACiB,EAAE,CAAChB,GAAH,EAAD,CAA1B,IAAwCE,IAAI,CAACC,EAAjE;AAEA,QAAMgB,OAAO,GAAGL,EAAE,CAACM,GAAH,KAAWJ,EAAE,CAACI,GAAH,EAA3B;AACA,QAAMC,WAAW,GAAG,CAACF,OAAO,GAAG,CAAV,GAAcA,OAAO,GAAG,GAAxB,GAA8BA,OAA/B,IAA0C,GAA9D;AAEA,QAAMG,OAAO,GAAGd,IAAI,CAACd,MAAM,CAACE,MAAR,EAAgBD,SAAS,CAACC,MAA1B,EAAkCsB,WAAlC,CAApB;AACA,QAAMK,OAAO,GAAGf,IAAI,CAACd,MAAM,CAACG,KAAR,EAAeF,SAAS,CAACE,KAAzB,EAAgCwB,WAAhC,CAApB;AAEA,SAAOnB,IAAI,CAACK,GAAL,CAASe,OAAT,EAAkBC,OAAlB,EAA2BzB,QAA3B,CAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Utility functions related to Google.\n */\n\n/**\n * Determines the best zoom level for a Google map.\n *\n * @param {google.maps.LatLngBounds} bounds The bounds.\n * @param {Object} mapDim JS POJO with the properties height and width.\n * @param {number} mapDim.height The height of the map's div.\n * @param {number} mapDim.width The width of the map's div.\n * @return {number} The best zoom level.\n */\nexport function googleMapBestZoomLevelFromBounds(bounds, mapDim) {\n  const WORLD_DIM = { height: 256, width: 256 };\n  const ZOOM_MAX = 21;\n\n  function latRad(lat) {\n    const sin = Math.sin((lat * Math.PI) / 180);\n    const radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n    return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n  }\n\n  function zoom(mapPx, worldPx, fraction) {\n    return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);\n  }\n\n  const ne = bounds.getNorthEast();\n  const sw = bounds.getSouthWest();\n\n  const latFraction = (latRad(ne.lat()) - latRad(sw.lat())) / Math.PI;\n\n  const lngDiff = ne.lng() - sw.lng();\n  const lngFraction = (lngDiff < 0 ? lngDiff + 360 : lngDiff) / 360;\n\n  const latZoom = zoom(mapDim.height, WORLD_DIM.height, latFraction);\n  const lngZoom = zoom(mapDim.width, WORLD_DIM.width, lngFraction);\n\n  return Math.min(latZoom, lngZoom, ZOOM_MAX);\n}\n"],"file":"google.js"}