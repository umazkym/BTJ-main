{"version":3,"sources":["../../../src/modules/path.js"],"names":["basename","path","split","pop","pathinfo","options","opt","realOpt","optName","optTemp","tmpArr","cnt","i","haveBasename","haveExtension","haveFilename","OPTS","PATHINFO_DIRNAME","PATHINFO_BASENAME","PATHINFO_EXTENSION","PATHINFO_FILENAME","PATHINFO_ALL","Object","prototype","hasOwnProperty","call","concat","length","_getExt","str","dotP","lastIndexOf","substr","dirName","replace","dirname","extension","slice","filename","filenameExtension"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,SAAOA,IAAI,CAACC,KAAL,CAAW,OAAX,EAAoBC,GAApB,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBH,IAAlB,EAAwBI,OAAxB,EAAiC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,aAAa,GAAG,KAApB;AACA,MAAIC,YAAY,GAAG,KAAnB,CA3CsC,CA4CtC;;AACA,MAAI,CAACd,IAAL,EAAW;AACT,WAAO,KAAP;AACD;;AACD,MAAI,CAACI,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,cAAV;AACD,GAlDqC,CAmDtC;AACA;;;AACA,QAAMW,IAAI,GAAG;AACXC,IAAAA,gBAAgB,EAAE,CADP;AAEXC,IAAAA,iBAAiB,EAAE,CAFR;AAGXC,IAAAA,kBAAkB,EAAE,CAHT;AAIXC,IAAAA,iBAAiB,EAAE,CAJR;AAKXC,IAAAA,YAAY,EAAE;AALH,GAAb,CArDsC,CA4DtC;;AACA,OAAKb,OAAL,IAAgBQ,IAAhB,EAAsB;AACpB,QAAIM,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,IAArC,EAA2CR,OAA3C,CAAJ,EAAyD;AACvDQ,MAAAA,IAAI,CAACK,YAAL,GAAoBL,IAAI,CAACK,YAAL,GAAoBL,IAAI,CAACR,OAAD,CAA5C;AACD;AACF;;AACD,MAAI,OAAOH,OAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACAA,IAAAA,OAAO,GAAG,GAAGqB,MAAH,CAAUrB,OAAV,CAAV;;AACA,SAAKO,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGP,OAAO,CAACsB,MAAxB,EAAgCf,CAAC,EAAjC,EAAqC;AACnC;AACA,UAAII,IAAI,CAACX,OAAO,CAACO,CAAD,CAAR,CAAR,EAAsB;AACpBH,QAAAA,OAAO,GAAGA,OAAO,GAAGO,IAAI,CAACX,OAAO,CAACO,CAAD,CAAR,CAAxB;AACD;AACF;;AACDP,IAAAA,OAAO,GAAGI,OAAV;AACD,GA5EqC,CA6EtC;;;AACA,QAAMmB,OAAO,GAAG,UAAU3B,IAAV,EAAgB;AAC9B,UAAM4B,GAAG,GAAG5B,IAAI,GAAG,EAAnB;AACA,UAAM6B,IAAI,GAAGD,GAAG,CAACE,WAAJ,CAAgB,GAAhB,IAAuB,CAApC;AACA,WAAO,CAACD,IAAD,GAAQ,KAAR,GAAgBA,IAAI,KAAKD,GAAG,CAACF,MAAb,GAAsBE,GAAG,CAACG,MAAJ,CAAWF,IAAX,CAAtB,GAAyC,EAAhE;AACD,GAJD,CA9EsC,CAmFtC;;;AACA,MAAIzB,OAAO,GAAGW,IAAI,CAACC,gBAAnB,EAAqC;AACnC,UAAMgB,OAAO,GAAGhC,IAAI,CAACiC,OAAL,CAAa,KAAb,EAAoB,GAApB,EAAyBA,OAAzB,CAAiC,aAAjC,EAAgD,EAAhD,CAAhB,CADmC,CACkC;;AACrExB,IAAAA,MAAM,CAACyB,OAAP,GAAiBF,OAAO,KAAKhC,IAAZ,GAAmB,GAAnB,GAAyBgC,OAA1C;AACD;;AACD,MAAI5B,OAAO,GAAGW,IAAI,CAACE,iBAAnB,EAAsC;AACpC,QAAIL,YAAY,KAAK,KAArB,EAA4B;AAC1BA,MAAAA,YAAY,GAAGb,QAAQ,CAACC,IAAD,CAAvB;AACD;;AACDS,IAAAA,MAAM,CAACV,QAAP,GAAkBa,YAAlB;AACD;;AACD,MAAIR,OAAO,GAAGW,IAAI,CAACG,kBAAnB,EAAuC;AACrC,QAAIN,YAAY,KAAK,KAArB,EAA4B;AAC1BA,MAAAA,YAAY,GAAGb,QAAQ,CAACC,IAAD,CAAvB;AACD;;AACD,QAAIa,aAAa,KAAK,KAAtB,EAA6B;AAC3BA,MAAAA,aAAa,GAAGc,OAAO,CAACf,YAAD,CAAvB;AACD;;AACD,QAAIC,aAAa,KAAK,KAAtB,EAA6B;AAC3BJ,MAAAA,MAAM,CAAC0B,SAAP,GAAmBtB,aAAnB;AACD;AACF;;AACD,MAAIT,OAAO,GAAGW,IAAI,CAACI,iBAAnB,EAAsC;AACpC,QAAIP,YAAY,KAAK,KAArB,EAA4B;AAC1BA,MAAAA,YAAY,GAAGb,QAAQ,CAACC,IAAD,CAAvB;AACD;;AACD,QAAIa,aAAa,KAAK,KAAtB,EAA6B;AAC3BA,MAAAA,aAAa,GAAGc,OAAO,CAACf,YAAD,CAAvB;AACD;;AACD,QAAIE,YAAY,KAAK,KAArB,EAA4B;AAC1BA,MAAAA,YAAY,GAAGF,YAAY,CAACwB,KAAb,CACb,CADa,EAEbxB,YAAY,CAACc,MAAb,IACGb,aAAa,GACVA,aAAa,CAACa,MAAd,GAAuB,CADb,GAEVb,aAAa,KAAK,KAAlB,GACA,CADA,GAEA,CALN,CAFa,CAAf;AASD;;AACDJ,IAAAA,MAAM,CAAC4B,QAAP,GAAkBvB,YAAlB;AACD,GA5HqC,CA6HtC;;;AACAJ,EAAAA,GAAG,GAAG,CAAN;;AACA,OAAKL,GAAL,IAAYI,MAAZ,EAAoB;AAClB,QAAIY,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCf,MAArC,EAA6CJ,GAA7C,CAAJ,EAAuD;AACrDK,MAAAA,GAAG;AACHJ,MAAAA,OAAO,GAAGD,GAAV;AACD;AACF;;AACD,MAAIK,GAAG,KAAK,CAAZ,EAAe;AACb,WAAOD,MAAM,CAACH,OAAD,CAAb;AACD,GAvIqC,CAwItC;;;AACA,SAAOG,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6B,iBAAT,CAA2BD,QAA3B,EAAqC;AAC1C,QAAMF,SAAS,GAAGhC,QAAQ,CAACkC,QAAD,EAAW,oBAAX,CAA1B;;AACA,MAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAO,EAAP;AACD;;AACD,SAAOA,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASD,OAAT,CAAiBlC,IAAjB,EAAuB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAOA,IAAI,CAACiC,OAAL,CAAa,KAAb,EAAoB,GAApB,EAAyBA,OAAzB,CAAiC,aAAjC,EAAgD,EAAhD,CAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Utility functions for filenames and paths.\n */\n\n/**\n * Returns the basename of a path.\n *\n * @param {string} path A path.\n * @return {string} The basename of the given path.\n */\nexport function basename(path) {\n  return path.split(/[\\\\/]/).pop();\n}\n\n/**\n * Returns info about a path.\n *\n * @param {string} path The path.\n * @param {number} [options] Optioanl options flag.\n */\nexport function pathinfo(path, options) {\n  //  discuss at: http://locutus.io/php/pathinfo/\n  // original by: Nate\n  //  revised by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Dmitry Gorelenkov\n  //    input by: Timo\n  //      note 1: Inspired by actual PHP source: php5-5.2.6/ext/standard/string.c line #1559\n  //      note 1: The way the bitwise arguments are handled allows for greater flexibility\n  //      note 1: & compatability. We might even standardize this\n  //      note 1: code and use a similar approach for\n  //      note 1: other bitwise PHP functions\n  //      note 1: Locutus tries very hard to stay away from a core.js\n  //      note 1: file with global dependencies, because we like\n  //      note 1: that you can just take a couple of functions and be on your way.\n  //      note 1: But by way we implemented this function,\n  //      note 1: if you want you can still declare the PATHINFO_*\n  //      note 1: yourself, and then you can use:\n  //      note 1: pathinfo('/www/index.html', PATHINFO_BASENAME | PATHINFO_EXTENSION);\n  //      note 1: which makes it fully compliant with PHP syntax.\n  //   example 1: pathinfo('/www/htdocs/index.html', 1)\n  //   returns 1: '/www/htdocs'\n  //   example 2: pathinfo('/www/htdocs/index.html', 'PATHINFO_BASENAME')\n  //   returns 2: 'index.html'\n  //   example 3: pathinfo('/www/htdocs/index.html', 'PATHINFO_EXTENSION')\n  //   returns 3: 'html'\n  //   example 4: pathinfo('/www/htdocs/index.html', 'PATHINFO_FILENAME')\n  //   returns 4: 'index'\n  //   example 5: pathinfo('/www/htdocs/index.html', 2 | 4)\n  //   returns 5: {basename: 'index.html', extension: 'html'}\n  //   example 6: pathinfo('/www/htdocs/index.html', 'PATHINFO_ALL')\n  //   returns 6: {dirname: '/www/htdocs', basename: 'index.html', extension: 'html', filename: 'index'}\n  //   example 7: pathinfo('/www/htdocs/index.html')\n  //   returns 7: {dirname: '/www/htdocs', basename: 'index.html', extension: 'html', filename: 'index'}\n  let opt = \"\";\n  let realOpt = \"\";\n  let optName = \"\";\n  let optTemp = 0;\n  const tmpArr = {};\n  let cnt = 0;\n  let i = 0;\n  let haveBasename = false;\n  let haveExtension = false;\n  let haveFilename = false;\n  // Input defaulting & sanitation\n  if (!path) {\n    return false;\n  }\n  if (!options) {\n    options = \"PATHINFO_ALL\";\n  }\n  // Initialize binary arguments. Both the string & integer (constant) input is\n  // allowed\n  const OPTS = {\n    PATHINFO_DIRNAME: 1,\n    PATHINFO_BASENAME: 2,\n    PATHINFO_EXTENSION: 4,\n    PATHINFO_FILENAME: 8,\n    PATHINFO_ALL: 0,\n  };\n  // PATHINFO_ALL sums up all previously defined PATHINFOs (could just pre-calculate)\n  for (optName in OPTS) {\n    if (Object.prototype.hasOwnProperty.call(OPTS, optName)) {\n      OPTS.PATHINFO_ALL = OPTS.PATHINFO_ALL | OPTS[optName];\n    }\n  }\n  if (typeof options !== \"number\") {\n    // Allow for a single string or an array of string flags\n    options = [].concat(options);\n    for (i = 0; i < options.length; i++) {\n      // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n      if (OPTS[options[i]]) {\n        optTemp = optTemp | OPTS[options[i]];\n      }\n    }\n    options = optTemp;\n  }\n  // Internal Functions\n  const _getExt = function (path) {\n    const str = path + \"\";\n    const dotP = str.lastIndexOf(\".\") + 1;\n    return !dotP ? false : dotP !== str.length ? str.substr(dotP) : \"\";\n  };\n  // Gather path infos\n  if (options & OPTS.PATHINFO_DIRNAME) {\n    const dirName = path.replace(/\\\\/g, \"/\").replace(/\\/[^/]*\\/?$/, \"\"); // dirname\n    tmpArr.dirname = dirName === path ? \".\" : dirName;\n  }\n  if (options & OPTS.PATHINFO_BASENAME) {\n    if (haveBasename === false) {\n      haveBasename = basename(path);\n    }\n    tmpArr.basename = haveBasename;\n  }\n  if (options & OPTS.PATHINFO_EXTENSION) {\n    if (haveBasename === false) {\n      haveBasename = basename(path);\n    }\n    if (haveExtension === false) {\n      haveExtension = _getExt(haveBasename);\n    }\n    if (haveExtension !== false) {\n      tmpArr.extension = haveExtension;\n    }\n  }\n  if (options & OPTS.PATHINFO_FILENAME) {\n    if (haveBasename === false) {\n      haveBasename = basename(path);\n    }\n    if (haveExtension === false) {\n      haveExtension = _getExt(haveBasename);\n    }\n    if (haveFilename === false) {\n      haveFilename = haveBasename.slice(\n        0,\n        haveBasename.length -\n          (haveExtension\n            ? haveExtension.length + 1\n            : haveExtension === false\n            ? 0\n            : 1)\n      );\n    }\n    tmpArr.filename = haveFilename;\n  }\n  // If array contains only 1 element: return string\n  cnt = 0;\n  for (opt in tmpArr) {\n    if (Object.prototype.hasOwnProperty.call(tmpArr, opt)) {\n      cnt++;\n      realOpt = opt;\n    }\n  }\n  if (cnt === 1) {\n    return tmpArr[realOpt];\n  }\n  // Return full-blown array\n  return tmpArr;\n}\n\n/**\n * Returns the extension of a filename.\n *\n * @param {string} filename The filename.\n * @return {string} The extension of the given filename.\n */\nexport function filenameExtension(filename) {\n  const extension = pathinfo(filename, \"PATHINFO_EXTENSION\");\n  if (typeof extension !== \"string\") {\n    return \"\";\n  }\n  return extension;\n}\n\n/**\n * Returns the dirname of a path.\n *\n * @param {string} path A path.\n * @return {string} The dirname of the given path.\n */\nexport function dirname(path) {\n  //  discuss at: http://locutus.io/php/dirname/\n  // original by: Ozh\n  // improved by: XoraX (http://www.xorax.info)\n  //   example 1: dirname('/etc/passwd')\n  //   returns 1: '/etc'\n  //   example 2: dirname('c:/Temp/x')\n  //   returns 2: 'c:/Temp'\n  //   example 3: dirname('/dir/test/')\n  //   returns 3: '/dir'\n  return path.replace(/\\\\/g, \"/\").replace(/\\/[^/]*\\/?$/, \"\");\n}\n"],"file":"path.js"}