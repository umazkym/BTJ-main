{"version":3,"sources":["../../../src/modules/string.js"],"names":["isArray","escapeRegExp","text","replace","trimCharacterMask","str","characterMask","options","escapedCharacterMask","shouldTrimLeft","shouldTrimRight","regexParts","length","regex","RegExp","join","trimCharacterRegex","regexCharacters","additionalModifiers","trim","trimLeft","trimRight","concatWithInnerOuterSeparators","arrayToConcat","outerSeparator","innerSeparator","toConcatFinally","value","ret","optionsValueLabel","arrayOfObjects","concatObjectProps","valueProp","obj","prop","map","propName","label","startsWith","haystack","needle","indexOf","ucaseFirst","string","charAt","toUpperCase","slice","reverseString","split","reverse","separateIntThousands","num","sep","toString","d","i","a"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Utility functions for working with strings.\n */\n\nimport { isArray } from \"./core\";\n\n/**\n * Escapes special characters for a JS regex.\n *\n * @see https://stackoverflow.com/questions/3115150/how-to-escape-regular-expression-special-characters-using-javascript#answer-9310752\n *\n * @param {string} text The string to escape.\n * @return {string} The same string with special regex characters escaped.\n */\nexport function escapeRegExp(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\n/**\n * Trim characters from the beginning and end of a string.\n *\n * @param {string} str The string.\n * @param {string} characterMask Character mask.\n * @param {Object} options Options.\n * @param {Object.boolean} options.shouldTrimLeft \"true\" to trim left (defaults to \"true\" if omitted).\n * @param {Object.boolean} options.shouldTrimRight \"true\" to trim right (defaults to \"true\" if omitted).\n * @return {string} The trimmed string.\n */\nexport function trimCharacterMask(str, characterMask, options = {}) {\n  if (typeof characterMask === \"undefined\") {\n    characterMask = \" \";\n  }\n  const escapedCharacterMask = escapeRegExp(characterMask);\n\n  const shouldTrimLeft =\n    typeof options.shouldTrimLeft === \"undefined\" || options.shouldTrimLeft;\n  const shouldTrimRight =\n    typeof options.shouldTrimRight === \"undefined\" || options.shouldTrimRight;\n\n  const regexParts = [];\n  if (shouldTrimLeft) {\n    regexParts[regexParts.length] = \"^[\" + escapedCharacterMask + \"]+\";\n  }\n  if (shouldTrimRight) {\n    regexParts[regexParts.length] = \"[\" + escapedCharacterMask + \"]+$\";\n  }\n  const regex = new RegExp(regexParts.join(\"|\"), \"gm\");\n  return str.replace(regex, \"\");\n}\n\n/**\n * Trim characters from the beginning and end of a string using an array\n * of regex characters.\n *\n * @param {string} str The string.\n * @param {string} regexCharacters Regex characters.\n * @param {string} additionalModifiers Additional regex modifiers.\n * @return {string} The trimmed string.\n */\nexport function trimCharacterRegex(str, regexCharacters, additionalModifiers) {\n  if (typeof regexCharacters === \"undefined\") {\n    regexCharacters = [\"\\\\s\"];\n  }\n  additionalModifiers = additionalModifiers || \"\";\n  const regex = new RegExp(\n    \"(^(\" +\n      regexCharacters.join(\"|\") +\n      \")+)|((\" +\n      regexCharacters.join(\"|\") +\n      \")+$)\",\n    \"g\" + additionalModifiers\n  );\n  return str.replace(regex, \"\");\n}\n\n/**\n * Alias of \"trimCharacterMask\".\n * Trim characters from the beginning and end of a string.\n *\n * @param {string} str The string.\n * @param {string} characterMask Character mask.\n * @return {string} The trimmed string.\n */\nexport function trim(str, characterMask) {\n  return trimCharacterMask(str, characterMask);\n}\n\n/**\n * Trim characters from the beginning of a string.\n *\n * @param {string} str The string.\n * @param {string} characterMask Character mask.\n * @return {string} The left-trimmed string.\n */\nexport function trimLeft(str, characterMask) {\n  return trimCharacterMask(str, characterMask, {\n    shouldTrimLeft: true,\n    shouldTrimRight: false,\n  });\n}\n\n/**\n * Trim characters from the end of a string.\n *\n * @param {string} str The string.\n * @param {string} characterMask Character mask.\n * @return {string} The right-trimmed string.\n */\nexport function trimRight(str, characterMask) {\n  return trimCharacterMask(str, characterMask, {\n    shouldTrimLeft: false,\n    shouldTrimRight: true,\n  });\n}\n\n/**\n * Concats the values of an array with an outer separator using an inner separator\n * for first nesting level arrays.\n *\n * E.g.:\n *\n *     concatWithInnerOuterSeparators([\"a\", \"value\", [\"with\", \"nested\", \"value\"], \"etc\"], \" # \", \" $ \")\n *     // Returns:\n *     \"a # value # with $ nested $ value # etc\"\n *\n * @param {Array<string>|Array<Array<string>>} arrayToConcat An array of strings or arrays or strings.\n * @param {string} outerSeparator Outer separator.\n * @param {string} innerSeparator Inner separator.\n * @return {string} The concatenated string.\n */\nexport function concatWithInnerOuterSeparators(\n  arrayToConcat,\n  outerSeparator = \" \",\n  innerSeparator = \" \"\n) {\n  const toConcatFinally = [];\n  for (const value of arrayToConcat) {\n    if (isArray(value)) {\n      toConcatFinally[toConcatFinally.length] = trim(\n        value.join(innerSeparator),\n        innerSeparator\n      );\n    } else {\n      toConcatFinally[toConcatFinally.length] = value;\n    }\n  }\n  const ret = trim(toConcatFinally.join(outerSeparator), outerSeparator);\n  return ret;\n}\n\n/**\n * Returns an array of options with a value and a label string.\n *\n * @param {Object} obj An object with parameters.\n * @param {Object[]} obj.arrayOfObjects An array of objects.\n * @param {string[]|Array.<string|string[]>} obj.concatObjectProps Properties, keys of each object to use for the label\n *                                                                 and to concat with \"outerSeparator\".\n *                                                                 A nested array of properties can be used to specify an inner\n *                                                                 part of the label to concat using the \"innerSeparator\".\n * @param {string} obj.valueProp Name of the property which value has to be used for the value property\n *                               of the returned array of objects.\n * @param {string} obj.outerSeparator Outer separator.\n * @param {string} obj.innerSeparator Inner separator.\n * @return {Object[]} Array of objects, each object with two properties:\n *\n *                        - \"value\": The value of the object;\n *                        - \"label\": The label of the object.\n *\n */\nexport function optionsValueLabel({\n  arrayOfObjects,\n  concatObjectProps,\n  valueProp = \"id\",\n  outerSeparator = \" \",\n  innerSeparator = \" \",\n}) {\n  const options = [];\n  for (const obj of arrayOfObjects) {\n    const arrayToConcat = [];\n    for (const prop of concatObjectProps) {\n      if (isArray(prop)) {\n        arrayToConcat[arrayToConcat.length] = prop.map(\n          propName => obj[propName]\n        );\n      } else {\n        arrayToConcat[arrayToConcat.length] = obj[prop];\n      }\n    }\n    options[options.length] = {\n      value: obj[valueProp],\n      label: concatWithInnerOuterSeparators(\n        arrayToConcat,\n        outerSeparator,\n        innerSeparator\n      ),\n    };\n  }\n  return options;\n}\n\n/**\n * Tests if a string starts with another\n *\n * @param {string} haystack The haystack string.\n * @param {string} needle The needle string.\n * @return {boolean} True if the haystack string starts with needle, false otherwise.\n */\nexport function startsWith(haystack, needle) {\n  return haystack.indexOf(needle, 0) === 0;\n}\n\n/**\n * Makes the first character of the given string uppercase.\n *\n * @param {string} string A string.\n * @return {string} The string with its first character made uppercase.\n */\nexport function ucaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Reverses a string.\n *\n * @param {string} string A string to reverse.\n * @return {string} The reversed string.\n */\nexport function reverseString(string) {\n  return string.split(\"\").reverse().join(\"\");\n}\n\n/**\n * Given an integer, returns a string containing the same integer with additional thousands separators.\n *\n * @param {number} num An integer.\n * @param {string} [sep] The thousands separator to use.\n * @return {string} The same integer with thousands separators.\n */\nexport function separateIntThousands(num, sep = \",\") {\n  return num\n    .toString()\n    .split(\"\")\n    .reverse()\n    .map((d, i, a) =>\n      (i + 1) % 3 === 0 && i !== a.length - 1 ? `${sep}${d}` : d\n    )\n    .reverse()\n    .join(\"\");\n}\n"],"file":"string.js"}