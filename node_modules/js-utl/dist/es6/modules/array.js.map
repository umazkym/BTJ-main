{"version":3,"sources":["../../../src/modules/array.js"],"names":["unshiftArray","arr","item","len","length","cloneArray","slice","arraySliceFromValueToValue","from","to","ret","include","value","push","areArrayItemsAllCoercibleToNumber","array","res","some","isNaN","arrayOrArrayLike","arg","Array","prototype","call","lastOfArray","firstOfArray","arrayFindReverse","fn","l","arrayMax","reduce","carry","current","Infinity","arrayMin","sortNums","arrayOfNums","desc","sort","a","b"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Array-related utility functions.\n */\n\n/**\n * Unshifts an array.\n *\n * @param {Array} arr The array.\n * @param {*} item The item to unshift.\n * @return {undefined}\n */\nexport function unshiftArray(arr, item) {\n  let len = arr.length;\n  while (len) {\n    arr[len] = arr[len - 1];\n    len--;\n  }\n  arr[0] = item;\n}\n\n/**\n * Clones an array.\n *\n * @param {Array} arr The array to clone.\n * @return {Array} The cloned array.\n */\nexport function cloneArray(arr) {\n  return arr.slice(0);\n}\n\n/**\n * Gets a slice of an array from a value up until another.\n *\n * @param {Array} arr The input array.\n * @param {number} from The \"from\" lower value.\n * @param {number} to The \"two\" upper value.\n * @return {Array} The slice as a new array.\n */\nexport function arraySliceFromValueToValue(arr, from, to) {\n  const ret = [];\n  let include = false;\n  for (const value of arr) {\n    if (!include && value == from) {\n      ret.push(value);\n      include = true;\n    } else if (include && value == to) {\n      ret.push(value);\n      break;\n    } else if (include) {\n      ret.push(value);\n    }\n  }\n  return ret;\n}\n\n/**\n * Tests whether all the elements of an array are coercible to a number or not.\n *\n * @param {Array} array An array.\n * @return {boolean} True if all the elements are coercible to a number, false otherwise.\n */\nexport function areArrayItemsAllCoercibleToNumber(array) {\n  const res = !array.some(isNaN);\n  return res;\n}\n\n/**\n * Copies an array or converts an array-like object to a new array.\n *\n * @param {*} arg Array or array-like object.\n * @return {Array} An array.\n */\nexport function arrayOrArrayLike(arg) {\n  return Array.prototype.slice.call(arg);\n}\n\n/**\n * Returns the last element of the given array.\n *\n * @param {Array} array An array.\n * @return {*} The last element of the array or undefined if there isn't one.\n */\nexport function lastOfArray(array) {\n  return array[array.length - 1];\n}\n\n/**\n * Returns the first element of the given array.\n *\n * @param {Array} array An array.\n * @return {*} The first element of the array or undefined if there isn't one.\n */\nexport function firstOfArray(array) {\n  return array[0];\n}\n\n/**\n * Like {@link Array.prototype.find}, but in reverse order.\n *\n * @param {Array} array An array.\n * @param {Function} fn Function to use for the test. The function will receive the array element as parameter.\n * @return {*} The first element which satisfies the test in the array by seeking for the element in reverse order\n *             (i.e. the last element of the array for which the test is satisfied).\n *             If no element satisfies the test, \"undefined\" is returned.\n */\nexport function arrayFindReverse(array, fn) {\n  let l = array.length;\n\n  let ret = void 0;\n  while (l) {\n    l--;\n    if (fn(array[l])) {\n      ret = array[l];\n      break;\n    }\n  }\n  return ret;\n}\n\n/**\n * Finds the maximum value of an array of numbers.\n *\n * @param {number[]} array An array of numbers.\n * @return {number|undefined} The maximum value of the array, or \"undefined\"\n *                            if the given array is empty.\n */\nexport const arrayMax = array =>\n  array.length\n    ? array.reduce(\n        (carry, current) => (current > carry ? current : carry),\n        -Infinity\n      )\n    : void 0;\n\n/**\n * Finds the minimum value of an array of numbers.\n *\n * @param {number[]} array An array of numbers.\n * @return {number|undefined} The minimum value of the array, or \"undefined\"\n *                            if the given array is empty.\n */\nexport const arrayMin = array =>\n  array.length\n    ? array.reduce(\n        (carry, current) => (current < carry ? current : carry),\n        +Infinity\n      )\n    : void 0;\n\n/**\n * Sorts an array of numbers returning a new array with the sorted\n * numbers (does not mutate the original).\n *\n * @param {number[]} arrayOfNums An array of numbers.\n * @param {boolean} [desc] True for descending order, false for ascending order (default).\n * @return {number[]} A new array with the sorted numbers.\n */\nexport const sortNums = (arrayOfNums, desc = false) =>\n  [...arrayOfNums].sort((a, b) =>\n    !desc // asc\n      ? a - b\n      : // desc\n        b - a\n  );\n"],"file":"array.js"}