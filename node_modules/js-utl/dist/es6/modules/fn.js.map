{"version":3,"sources":["../../../src/modules/fn.js"],"names":["isObjectEmpty","isArray","arrayOrArrayLike","JSUtlCurryPlaceholderProp","_","JSUtlProceedCallingFnProp","proceedCallingFn","curry","fn","arity","onEffectiveArgAdded","onPlaceholder","onFnCall","onCurriedFnFirstCall","onNewCurriedFn","curriedFnFirstCall","expectedNumberOfArgs","length","nextParameterIndex","placeholdersIndices","curriedInner","args","curriedFn","addedArgs","newExpectedNumberOfArgs","newNextParameterIndex","newPlaceholdersIndices","argsRequiredChange","numberOfConsumablePlaceholders","addedArg","isPlaceholder","argIndex","firstIndex","rest","shift","concat","push","curried","call","shouldCallCurriedFn","newCurried","newCurriedFn","POJOCurry","plugPropertyName","plugPropertyMustBeTruthy","onPOJOArgMerged","POJO","accPOJO","POJOArg","Object","assign","prototype","hasOwnProperty","POJOArgIgnoredProperty","POJOIgnoredProperty","POJORest","ret","compose","fns","outerArgs","hoFn","flat","i","pipe","reduce","arg","pick","props","o","a","e","liftBinaryFn","binaryFn","firstFn","secondFn","params","juxt","values","map","converge","multiArgFn","execIfPOJOHas","prop","execWithExistentProps","filter","forGen","gen","generator","arr","value","res","flatten","Array","apply","flattenDeep","dimension","acc","val","cartesianProduct","sets","set","x","y","identityFn","identityArgsFn","chainLink","next","chain","chainFn","reduceRight","nextChainLink"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,aAAT,EAAwBC,OAAxB,QAAuC,QAAvC;AACA,SAASC,gBAAT,QAAiC,SAAjC;AAEA;AACA;AACA;;AACA,MAAMC,yBAAyB,GAAG,0CAAlC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,CAAC,GAAG;AACf,GAACD,yBAAD,GAA6B;AADd,CAAV;AAIP;AACA;AACA;;AACA,MAAME,yBAAyB,GAAG,0CAAlC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG;AAC9B,GAACD,yBAAD,GAA6B;AADC,CAAzB;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,KAAK,GAAG,CACnBC,EADmB,EAEnB;AACEC,EAAAA,KAAK,GAAG,KAAK,CADf;AAEEC,EAAAA,mBAAmB,GAAG,KAAK,CAF7B;AAGEC,EAAAA,aAAa,GAAG,KAAK,CAHvB;AAIEC,EAAAA,QAAQ,GAAG,KAAK,CAJlB;AAKEC,EAAAA,oBAAoB,GAAG,KAAK,CAL9B;AAMEC,EAAAA,cAAc,GAAG,KAAK;AANxB,IAOI,EATe,KAUhB;AACH,MAAIC,kBAAkB,GAAG,IAAzB;AAEA,QAAMC,oBAAoB,GAAG,OAAOP,KAAP,KAAiB,WAAjB,GAA+BA,KAA/B,GAAuCD,EAAE,CAACS,MAAvE;AACA,QAAM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","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Utility functions for functional programming.\n */\n\nimport { isObjectEmpty, isArray } from \"./core\";\nimport { arrayOrArrayLike } from \"./array\";\n\n/**\n * @type {string}\n */\nconst JSUtlCurryPlaceholderProp = \"JSUtlCurryPlaceholderPropRPecoyYmCYqZ2lE\";\n\n/**\n * Curry function placeholder.\n *\n * @type {Object}\n */\nexport const _ = {\n  [JSUtlCurryPlaceholderProp]: true,\n};\n\n/**\n * @type {string}\n */\nconst JSUtlProceedCallingFnProp = \"JSUtlProceedCallingFnPropRBmGaAgOCgftF9t\";\n\n/**\n * Return value of \"onFnCall\" to call the curried function and return its value.\n *\n * @type {Object}\n */\nexport const proceedCallingFn = {\n  [JSUtlProceedCallingFnProp]: true,\n};\n\n/**\n * Curries a function.\n *\n * @see https://medium.com/@kj_huang/implementation-of-lodash-curry-function-8b1024d71e3b\n *\n * @param {Function} fn A function to curry in order to return the curried version of the function.\n * @param {Object} [obj] An optional object with further properties to tweak the currying behaviour\n *                       and execute code while collecting the arguments of the curried function.\n * @param {number|undefined} [obj.arity] The arity of the function, i.e. its number of arguments.\n *                                       If omitted, \"fn.length\" will be used.\n * @param {Function|undefined} [obj.onEffectiveArgAdded] An optional callback to execute whenever a new effective argument\n *                                                       (not a placeholder) is added to the curried function.\n *                                                       The callback will receive an object with the following properties as argument:\n *\n *                                                           - addedArg: The effective argument added;\n *                                                           - args: An array with all the previously arguments collected so far\n *                                                                   without considering \"addedArg\";\n *                                                           - fn: The function \"fn\";\n *                                                           - curriedFn: The current curried function;\n *\n *                                                       The return value of the function is ignored.\n * @param {Function|undefined} [obj.onPlaceholder] An optional callback to execute whenever a new placeholder is added to the curried function.\n *                                                 The callback will receive an object with the following properties as argument:\n *\n *                                                     - args: An array with all the previously arguments collected so far\n *                                                             without considering \"addedArg\";\n *                                                     - fn: The function \"fn\";\n *                                                     - curriedFn: The current curried function;\n *\n *                                                 The return value of the function is ignored.\n * @param {Function|undefined} [obj.onFnCall] An optional callback to execute just before calling the \"fn\" function\n *                                            (i.e. when the \"fn\" function is ready to be called and all its arguments have been collected).\n *\n *                                            The callback will receive an object with the following properties as argument:\n *\n *                                                - args: The array of the effective arguments of the \"fn\" function;\n *                                                - fn: The function \"fn\" which was initially passed to \"curry\";\n *                                                - curriedFn: The current curried function;\n *\n *                                            This way, the code of the callback may decide what to do and may even call the function on its own\n *                                            and prevent the call from the caller side (i.e. within the \"curry\" function).\n *\n *                                            The callback must explicitly tell \"curry\" to call the function by returing \"proceedCallingFn\".\n *                                            If the callback returns any other value, then \"fn\" will not be called in \"curry\" and the return value\n *                                            of this callback will be returned.\n * @param {Function|undefined} [obj.onCurriedFnFirstCall] An optional callback to execute only the first time when the first curried function returned by \"curry\"\n *                                                        is invoked for the very first time with the very first argument or arguments.\n *\n *                                                        The callback will receive an object with the following properties as argument:\n *\n *                                                            - addedArgs: The arguments provided by the caller;\n *                                                            - fn: The \"fn\" function;\n *                                                            - curriedFn: The current curried function;\n *\n * @param {Function|undefined} [obj.onNewCurriedFn] An optional callback to execute initially and each time a new curried function is going to be returned.\n *\n *                                                  The callback will an object with the following properties as argument:\n *\n *                                                      - curriedFn: The current curried function (same as \"newCurriedFn\" when this callback is invoked\n *                                                                   for the very first time);\n *                                                      - newCurriedFn: The new curried function (will be the same as \"curriedFn\" when this callback is invoked\n *                                                                      for the very first time);\n *\n *\n * @return {Function} The curried version of the function.\n */\nexport const curry = (\n  fn,\n  {\n    arity = void 0,\n    onEffectiveArgAdded = void 0,\n    onPlaceholder = void 0,\n    onFnCall = void 0,\n    onCurriedFnFirstCall = void 0,\n    onNewCurriedFn = void 0,\n  } = {}\n) => {\n  let curriedFnFirstCall = true;\n\n  const expectedNumberOfArgs = typeof arity !== \"undefined\" ? arity : fn.length;\n  const nextParameterIndex = 0;\n  const placeholdersIndices = [];\n\n  const curriedInner = (\n    expectedNumberOfArgs,\n    nextParameterIndex,\n    placeholdersIndices,\n    ...args\n  ) =>\n    function curriedFn(...addedArgs) {\n      let newExpectedNumberOfArgs = expectedNumberOfArgs;\n      let newNextParameterIndex = nextParameterIndex;\n      let newPlaceholdersIndices = null;\n      let argsRequiredChange = false;\n      curriedFnFirstCall &&\n        ((onCurriedFnFirstCall &&\n          onCurriedFnFirstCall({ addedArgs, fn, curriedFn })) ||\n          true) &&\n        (curriedFnFirstCall = false);\n      let numberOfConsumablePlaceholders = placeholdersIndices.length;\n      for (const addedArg of addedArgs) {\n        !argsRequiredChange && (args = [...args]);\n        argsRequiredChange = true;\n        // \"addedArg\" may be either a placeholder or an effective argument.\n        const isPlaceholder = addedArg\n          ? addedArg[JSUtlCurryPlaceholderProp] === _[JSUtlCurryPlaceholderProp]\n          : false;\n        if (numberOfConsumablePlaceholders > 0 && !isPlaceholder) {\n          // Argument is an effective argument consuming a previously set placeholder.\n          onEffectiveArgAdded &&\n            onEffectiveArgAdded({ addedArg, args, fn, curriedFn });\n          let argIndex;\n          if (newPlaceholdersIndices === null) {\n            const [firstIndex, ...rest] = placeholdersIndices;\n            argIndex = firstIndex;\n            newPlaceholdersIndices = rest;\n          } else {\n            argIndex = newPlaceholdersIndices.shift();\n          }\n          args[argIndex] = addedArg;\n          numberOfConsumablePlaceholders--;\n          newExpectedNumberOfArgs--;\n        } else {\n          if (isPlaceholder) {\n            // Argument is a new placeholder.\n            if (newPlaceholdersIndices === null) {\n              newPlaceholdersIndices = placeholdersIndices.concat(\n                newNextParameterIndex\n              );\n            } else {\n              newPlaceholdersIndices.push(newNextParameterIndex);\n            }\n            onPlaceholder && onPlaceholder({ args, fn, curriedFn });\n          } else {\n            // Argument is an effective argument.\n            newExpectedNumberOfArgs--;\n            onEffectiveArgAdded &&\n              onEffectiveArgAdded({ addedArg, args, fn, curriedFn });\n          }\n          args[newNextParameterIndex] = addedArg;\n          newNextParameterIndex++;\n        }\n      }\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return curried.call(\n        null,\n        curriedFn,\n        newExpectedNumberOfArgs,\n        newNextParameterIndex,\n        newPlaceholdersIndices === null\n          ? [...placeholdersIndices]\n          : newPlaceholdersIndices,\n        ...args\n      );\n    };\n\n  const curried = (\n    curriedFn,\n    expectedNumberOfArgs,\n    nextParameterIndex,\n    placeholdersIndices,\n    ...args\n  ) => {\n    if (expectedNumberOfArgs <= 0) {\n      if (onFnCall) {\n        const shouldCallCurriedFn = onFnCall({ args, fn, curriedFn });\n        if (\n          shouldCallCurriedFn &&\n          shouldCallCurriedFn[JSUtlProceedCallingFnProp] ===\n            proceedCallingFn[JSUtlProceedCallingFnProp]\n        ) {\n          return fn(...args);\n        } else {\n          return shouldCallCurriedFn;\n        }\n      } else {\n        return fn(...args);\n      }\n    } else {\n      const newCurried = curriedInner(\n        expectedNumberOfArgs,\n        nextParameterIndex,\n        placeholdersIndices,\n        ...args\n      );\n      onNewCurriedFn && onNewCurriedFn({ curriedFn, newCurriedFn: newCurried });\n      return newCurried;\n    }\n  };\n\n  const newCurried = curriedInner(\n    expectedNumberOfArgs,\n    nextParameterIndex,\n    placeholdersIndices\n  );\n  onNewCurriedFn &&\n    onNewCurriedFn({ curriedFn: newCurried, newCurriedFn: newCurried });\n  return newCurried;\n};\n\n/**\n * Curries a POJO function, i.e. a function having only a single POJO (Plain Old JavaScript Object)\n * as parameter (a function with named arguments).\n *\n * Each object passed to the returned curried function will be merged with the final object\n * to pass to the function \"fn\" when finally calling it.\n *\n * @param {Function} fn A function to curry in order to return the curried version of the function.\n * @param {Object} [obj] An optional object with further properties to tweak the currying behaviour\n *                       and execute code while collecting the POJO objects which will construct\n *                       the final POJO object to pass to the curried function after plugging the curried POJO function.\n * @param {string} [obj.plugPropertyName] The name of the property which instructs that it's time to call the function.\n * @param {boolean} [obj.plugPropertyMustBeTruthy] By default, it is enough that the property with \"obj.plugPropertyName\" name\n *                                                 is set on the object passed to the curried function to instruct it to call\n *                                                 \"fn\".\n *                                                 If this property is set to \"true\", the property with \"plugPropertyName\" name\n *                                                 will also have to be truthy.\n * @param {Function} [obj.onPOJOArgMerged] An optional callback to execute right after merging the next POJO argument with the so far accumulated POJO object.\n *                                         The callback will an object with the following properties as argument:\n *\n *                                             - POJOArg: The given POJO argument;\n *                                             - POJO: the so far merged POJO object merged with the given \"POJOArg\";\n *                                             - fn: The \"fn\" function;\n *                                             - curriedFn: The current curried function;\n *\n * @param {Function} [obj.onFnCall] An optional callback to execute just before calling the \"fn\" function\n *                                  (i.e. when the \"fn\" function is ready to be called and has been plugged and all\n *                                  of its POJO object argument properties have been collected).\n *\n *                                  The callback will receive an object with the following properties as argument:\n *\n *                                      - POJO: The callback will receive the function \"fn\" POJO argument (an object) as its first argument;\n *                                      - fn: The \"fn\" function;\n *                                      - curriedFn: The current curried function;\n *\n *                                  This way, the code of the callback may decide what to do and may even call the function on its own\n *                                  and prevent the call from the caller side (i.e. within the \"POJOCurry\" function).\n *\n *                                  The callback must explicitly tell \"POJOCurry\" to call the function by returing \"proceedCallingFn\"\n *                                  If the callback returns any other value, then \"fn\" will not be called in \"POJOCurry\" and the return value\n *                                  of this callback will be returned.\n * @param {Function|undefined} [obj.onCurriedFnFirstCall] An optional callback to execute only the first time when the first curried function returned by \"curry\"\n *                                                        is invoked for the very first time with the very first POJO argument.\n *\n *                                                        The callback will receive an object with the following properties as argument:\n *\n *                                                            - POJOArg: The given POJO argument yet to merge with the internal final POJO;\n *                                                            - fn: The \"fn\" function;\n *                                                            - curriedFn: The current curried function;\n *\n * @param {Function|undefined} [obj.onNewCurriedFn] An optional callback to execute initially and each time a new curried function is going to be returned.\n *\n *                                                  The callback will receive an object with the following properties as argument:\n *\n *                                                      - curriedFn: The current curried function (same as \"newCurriedFn\" when this callback is invoked\n *                                                                   for the very first time);\n *                                                      - newCurriedFn: The new curried function (will be the same as \"curriedFn\" when this callback is invoked\n *                                                                      for the very first time);\n *\n * @return {Function} The curried version of the function.\n */\nexport const POJOCurry = (\n  fn,\n  {\n    plugPropertyName = \"plugCurried\",\n    plugPropertyMustBeTruthy = false,\n    onPOJOArgMerged = void 0,\n    onFnCall = void 0,\n    onCurriedFnFirstCall = void 0,\n    onNewCurriedFn = void 0,\n  } = {}\n) => {\n  const POJO = {};\n  let curriedFnFirstCall = true;\n\n  const curriedInner = accPOJO =>\n    function curriedFn(POJOArg) {\n      curriedFnFirstCall &&\n        ((onCurriedFnFirstCall &&\n          onCurriedFnFirstCall({ POJOArg, fn, curriedFn })) ||\n          true) &&\n        (curriedFnFirstCall = false);\n      let POJO = Object.assign({}, accPOJO, POJOArg || {});\n      if (\n        Object.prototype.hasOwnProperty.call(POJO, plugPropertyName) &&\n        (!plugPropertyMustBeTruthy || POJO[plugPropertyName])\n      ) {\n        const { [plugPropertyName]: POJOArgIgnoredProperty, ...rest } = POJOArg;\n        const { [plugPropertyName]: POJOIgnoredProperty, ...POJORest } = POJO;\n        POJO = POJORest;\n        if (!isObjectEmpty(rest)) {\n          onPOJOArgMerged &&\n            onPOJOArgMerged({ POJOArg: rest, POJO, fn, curriedFn });\n        }\n        let shouldCallCurriedFn = true;\n        let ret = void 0;\n        if (onFnCall) {\n          ret = onFnCall({ POJO, fn, curriedFn });\n          shouldCallCurriedFn = ret\n            ? ret[JSUtlProceedCallingFnProp] ===\n              proceedCallingFn[JSUtlProceedCallingFnProp]\n            : false;\n        }\n\n        if (shouldCallCurriedFn) {\n          return fn(POJO);\n        } else {\n          return ret;\n        }\n      } else {\n        onPOJOArgMerged && onPOJOArgMerged({ POJOArg, POJO, fn, curriedFn });\n        const newCurried = curriedInner(POJO);\n        onNewCurriedFn &&\n          onNewCurriedFn({ curriedFn, newCurriedFn: newCurried });\n        return newCurried;\n      }\n    };\n\n  const newCurried = curriedInner(POJO);\n  onNewCurriedFn &&\n    onNewCurriedFn({ curriedFn: newCurried, newCurriedFn: newCurried });\n  return newCurried;\n};\n\n/**\n * A utility function which composes functions or higher-order functions.\n *\n * @param {...Function|...Function[]} fns A list of functions or higher-order functions or arrays of functions\n *                                        (arrays will be flattened) to compose.\n * @return {Function} A function composed of all the functions or higher-order functions\n *                    used for composition.\n */\nexport const compose = (...fns) => (...args) => {\n  let outerArgs = args;\n  let hoFn = void 0;\n  fns = fns.flat(1);\n  for (let i = fns.length - 1; i >= 0; i--) {\n    const fn = fns[i];\n    hoFn = fn(...outerArgs);\n    outerArgs = [hoFn];\n  }\n  return hoFn;\n};\n\n/**\n * A utility function which pipes functions.\n *\n * @param {...Function|...Function[]} fns A list of functions or arrays of functions (arrays will be flattened)\n *                                        to pipe.\n * @return {Function} A function representing the pipe.\n */\nexport const pipe = (...fns) => (...args) => {\n  fns = fns.flat(1);\n  return fns.length ? fns.reduce((arg, fn) => [fn(...arg)], args)[0] : void 0;\n};\n\n/**\n * Returns a function which lets picking the properties of an object.\n *\n * @param {...string|...number} props The properties to pick.\n * @return {Function} A function which if called picks the \"props\" properties from its argument object\n *                    and returns a new object with the picked properties.\n */\nexport const pick = (...props) => o =>\n  props.reduce((a, e) => ({ ...a, [e]: o[e] }), {});\n\n/**\n * Lifts two functions using a binary function which takes their results as arguments.\n *\n * @param {Function} binaryFn A binary function (i.e. a function which takes two arguments).\n * @return {Function} A higher-order function which has to be called with the first function as argument (\"firstFn\")\n *                    and returns another higher-order function which has to be called with the second function as argument (\"secondFn\").\n *                    Then, the returned function will take the parameters to pass to the two functions (\"firstFn\" and \"secondFn\")\n *                    and return the result of calling \"binaryFn\" with the result of those functions given as parameters.\n */\nexport const liftBinaryFn = binaryFn => firstFn => secondFn => (...params) =>\n  binaryFn(firstFn(...params), secondFn(...params));\n\n/**\n * Applies an array of functions to a list of values.\n *\n * @param {Function[]} fns An array of functions.\n * @return {Function} A function which if called with a list of values, will pass the list to each function of \"fns\"\n *                    and return an array with the values after applying each of the original \"fns\" to its parameters.\n */\nexport const juxt = fns => (...values) => fns.map(fn => fn(...values));\n\n/**\n * Converges a multi-arg function.\n *\n * @param {Function} multiArgFn A multi-arg function.\n * @param {Function[]} fns An array of functions to converge.\n *                         Each function will receive the parameter passed to the function returned\n *                         by this higher-order function (i.e. \"params\").\n * @return {Function} A function which, if called, will pass its arguments to each of the functions in \"fns\"\n *                    and pass each result of those functions to the multi-arg function \"multiArgFn\",\n *                    returning its result.\n */\nexport const converge = (multiArgFn, fns) => (...params) =>\n  multiArgFn(...fns.map(fn => fn(...params)));\n\n/**\n * Executes a callback if a POJO object has a property.\n *\n * @param {Object} POJO A POJO object.\n * @return {(prop: string|number) => (fn: Function) => *} A function which receives the property\n *                                                        and returns and returns a function receiving the callback\n *                                                        function (\"fn\") to execute.\n */\nexport const execIfPOJOHas = POJO => prop => fn =>\n  Object.prototype.hasOwnProperty.call(POJO, prop) && fn(POJO[prop], POJO);\n\n/**\n * Executes a callback with the existent properties of an object.\n *\n * @param {...string|...number} props The properties to check for existence.\n * @return {(o: Object) => (fn: (existentProps: string[]|number[]) => *) => *} A function which receives the POJO object for which to check for the given properties\n *                                                                             and returns a function receiving a callback which will receive the existent properties\n *                                                                             of the object as parameter.\n */\nexport const execWithExistentProps = (...props) => o => fn =>\n  fn(props.filter(prop => Object.prototype.hasOwnProperty.call(o, prop)));\n\n/**\n * Loops through the values of a generator and returns an array with its mapped\n * values mapped with the given callback.\n *\n * @param {GeneratorFunction} gen A generator function.\n * @return {(args: ...*) => (fn: (val: *) => *) => Array} A function which takes the arguments for the generator and returns\n *                                                        another function which takes the callback to use to map each\n *                                                        value of the generator returning an array with all the mapped values of the generator.\n */\nexport const forGen = gen => (...args) => fn => {\n  const generator = gen(...args);\n  const arr = [];\n  for (const value of generator) {\n    const res = fn(value);\n    arr.push(res);\n  }\n  return arr;\n};\n\n/**\n * Flattens an array (its first dimension, at most).\n *\n * @param {Array} arr An array.\n * @return {Array} A new flattened array.\n */\nexport const flatten = arr => Array.prototype.concat.apply([], arr);\n\n/**\n * Flattens an array with any dimension.\n *\n * @param {Array} arr An array.\n * @param {number} dimension The flattening dimension (defaults to 1, but can be greater, even \"Infinity\").\n * @return {Array} The flattened array.\n */\nexport const flattenDeep = (arr, dimension = 1) => {\n  return dimension > 0\n    ? arr.reduce(\n        (acc, val) =>\n          acc.concat(isArray(val) ? flattenDeep(val, dimension - 1) : val),\n        []\n      )\n    : arrayOrArrayLike(arr);\n};\n\n/**\n * Computes the cartesian product of the given sets.\n *\n * @param  {...Array} sets The sets to use to compute the cartesian product.\n * @return {Array} The cartesian product of the given sets.\n */\nexport const cartesianProduct = (...sets) =>\n  sets.reduce((acc, set) => flatten(acc.map(x => set.map(y => [...x, y]))), [\n    [],\n  ]);\n\n/**\n * Identity function.\n *\n * @see https://en.wikipedia.org/wiki/Identity_function\n *\n * @param {*} value Any value.\n * @return {*} The same passed value.\n */\nexport const identityFn = value => value;\n\n/**\n * Identity function for multiple args returning an array of those args.\n *\n * @param  {...*} args The args.\n * @return {Array} The same args returned in an array.\n */\nexport const identityArgsFn = (...args) => args;\n\n/**\n * @type {Function}\n */\nconst chainLink = (fn, next) => args =>\n  fn(args, next && ((...args) => next(args)));\n\n/**\n * A higher-order function to create a chain of functions following the Chain of Responsibility design pattern.\n *\n * @param {...Function|...Function[]} fns A list of functions or higher-order functions or arrays of functions\n *                                        (arrays will be flattened) to chain.\n * @return {Function} A function representing the chain of the given functions which, if called, will return the result of the chain.\n *                    Each function will receive the next function as its last parameter.\n */\nexport const chain = (...fns) => (...args) => {\n  fns = fns.flat(1);\n  const chainFn = fns.reduceRight((nextChainLink, fn) => {\n    return chainLink(fn, nextChainLink);\n  }, void 0);\n  return chainFn(args);\n};\n"],"file":"fn.js"}