{"version":3,"sources":["../../../src/modules/date.js"],"names":["trim","isValidDate","value","Object","prototype","toString","call","isNaN","getTime","isValidDateTimeStr","str","Date","utcDate","Y","m","d","H","i","s","date","finalDate","year","getUTCFullYear","month","getUTCMonth","padStart","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","UTCDate","finalUTCDate","replace"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { trim } from \"./string\";\n\n/**\n * Tests if the given value is a valid date.\n *\n * @param {*} value The value to test.\n * @return {boolean} True if it is a valid date, false otherwise.\n */\nexport function isValidDate(value) {\n  return (\n    Object.prototype.toString.call(value) === \"[object Date]\" &&\n    !isNaN(value.getTime())\n  );\n}\n\n/**\n * Tests if the given string is a valid datetime string (e.g. in ISO \"YYYY-MM-DD HH:ii:ss\" format).\n *\n * @param {string} str The given string.\n * @return {boolean} True if it is a valid datetime string, false otherwise.\n */\nexport function isValidDateTimeStr(str) {\n  return isValidDate(new Date(str));\n}\n\n/**\n * Returns a UTC datetime in ISO `YYYY-MM-DD HH:ii:ss` format.\n *\n * @param {Object} [options] An optional object of options.\n * @param {boolean} [options.Y] True to return the year of the UTC datetime. Defaults to true.\n * @param {boolean} [options.m] True to return the month of the UTC datetime. Defaults to true.\n * @param {boolean} [options.d] True to return the day of the UTC datetime. Defaults to true.\n * @param {boolean} [options.H] True to return the hours of the UTC datetime. Defaults to true.\n * @param {boolean} [options.i] True to return the minutes of the UTC datetime. Defaults to true.\n * @param {boolean} [options.s] True to return the seconds of the UTC datetime. Defaults to true.\n * @param {Date|string} [options.date] A date or a string that will be passed to the `Date` constructor\n *                                     which represents the date on which to compute and return the UTC date.\n * @return {string} The UTC datetime.\n */\nexport const utcDate = ({\n  Y = true,\n  m = true,\n  d = true,\n  H = true,\n  i = true,\n  s = true,\n  date = void 0,\n} = []) => {\n  const finalDate = date ? new Date(date) : new Date();\n  const year = finalDate.getUTCFullYear();\n  const month = (finalDate.getUTCMonth() + 1 + \"\").padStart(2, \"0\");\n  const day = (finalDate.getUTCDate() + \"\").padStart(2, \"0\");\n  const hours = (finalDate.getUTCHours() + \"\").padStart(2, \"0\");\n  const minutes = (finalDate.getUTCMinutes() + \"\").padStart(2, \"0\");\n  const seconds = (finalDate.getUTCSeconds() + \"\").padStart(2, \"0\");\n\n  const UTCDate = trim(\n    trim(\n      `${Y ? year : \"\"}-${m && (Y || d || (!Y && !d)) ? month : \"\"}-${\n        d ? day : \"\"\n      }`,\n      \" -\"\n    ) +\n      \" \" +\n      trim(\n        `${H ? hours : \"\"}:${i && (H || s || (!H && !s)) ? minutes : \"\"}:${\n          s ? seconds : \"\"\n        }`,\n        \" :\"\n      ),\n    \" \"\n  );\n\n  let finalUTCDate = UTCDate.replace(\"--\", \"-\");\n  finalUTCDate = finalUTCDate.replace(\"::\", \":\");\n\n  return finalUTCDate;\n};\n"],"file":"date.js"}