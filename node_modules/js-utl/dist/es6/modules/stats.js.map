{"version":3,"sources":["../../../src/modules/stats.js"],"names":["sum","intDiv","isOdd","sortNums","mean","numbers","length","median","sorted","middleIndex","minAbsDeviationFromValue","value","minAbsDeviation","Infinity","map","num","deviation","Math","abs","minAbsDeviationFromExcludedValue","filter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,KAAtB,QAAmC,QAAnC;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAc,GAAGC,OAAjB,EAA0B;AAC/B,SAAOL,GAAG,CAAC,GAAGK,OAAJ,CAAH,GAAkBA,OAAO,CAACC,MAAjC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgB,GAAGF,OAAnB,EAA4B;AACjC,QAAMG,MAAM,GAAGL,QAAQ,CAACE,OAAD,CAAvB;AACA,QAAMI,WAAW,GAAGR,MAAM,CAACO,MAAM,CAACF,MAAR,EAAgB,CAAhB,CAA1B;AACA,SAAOJ,KAAK,CAACM,MAAM,CAACF,MAAR,CAAL,GACHE,MAAM,CAACC,WAAD,CADH,GAEHL,IAAI,CAACI,MAAM,CAACC,WAAW,GAAG,CAAf,CAAP,EAA0BD,MAAM,CAACC,WAAD,CAAhC,CAFR;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAGC,KAAK,IAAI,CAAC,GAAGN,OAAJ,KAAgB;AAC/D,MAAIO,eAAe,GAAGC,QAAtB;AACAR,EAAAA,OAAO,CAACS,GAAR,CAAYC,GAAG,IAAI;AACjB,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASH,GAAG,GAAGJ,KAAf,CAAlB;;AACA,QAAIK,SAAS,GAAGJ,eAAhB,EAAiC;AAC/BA,MAAAA,eAAe,GAAGI,SAAlB;AACD;AACF,GALD;AAMA,SAAOJ,eAAP;AACD,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,gCAAgC,GAAGR,KAAK,IAAI,CAAC,GAAGN,OAAJ,KACvDK,wBAAwB,CAACC,KAAD,CAAxB,CAAgC,GAAGN,OAAO,CAACe,MAAR,CAAeL,GAAG,IAAIA,GAAG,KAAKJ,KAA9B,CAAnC,CADK","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Statistics-related utility functions.\n */\n\nimport { sum, intDiv, isOdd } from \"./math\";\nimport { sortNums } from \"./array\";\n\n/**\n * Computes the mean of the given numbers.\n *\n * @param {...number} numbers The numbers.\n * @return {number} The mean.\n */\nexport function mean(...numbers) {\n  return sum(...numbers) / numbers.length;\n}\n\n/**\n * Computes the median of the given numbers.\n *\n * @param {...number} numbers The numbers.\n * @return {number} The median value.\n */\nexport function median(...numbers) {\n  const sorted = sortNums(numbers);\n  const middleIndex = intDiv(sorted.length, 2);\n  return isOdd(sorted.length)\n    ? sorted[middleIndex]\n    : mean(sorted[middleIndex - 1], sorted[middleIndex]);\n}\n\n/**\n * Computes the min deviation from a value.\n *\n * @param {number} value A value.\n * @return {(...numbers: number[]) => number} A function receiving the numbers to use to compute the minimum deviation\n *                                            from \"value\".\n */\nexport const minAbsDeviationFromValue = value => (...numbers) => {\n  let minAbsDeviation = Infinity;\n  numbers.map(num => {\n    const deviation = Math.abs(num - value);\n    if (deviation < minAbsDeviation) {\n      minAbsDeviation = deviation;\n    }\n  });\n  return minAbsDeviation;\n};\n\n/**\n * Computes the min deviation from a value excluding that value from the numbers received.\n *\n * @param {number} value A value.\n * @return {(...numbers: number[]) => number} A function receiving the numbers to use to compute the minimum deviation\n *                                            from \"value\" exluding \"value\".\n */\nexport const minAbsDeviationFromExcludedValue = value => (...numbers) =>\n  minAbsDeviationFromValue(value)(...numbers.filter(num => num !== value));\n"],"file":"stats.js"}