{"version":3,"sources":["../../../src/modules/time.js"],"names":["isIntegerOrIntegerStr","intDiv","time","d","Date","seconds","Math","round","getTime","msToTime","ms","date","isoDate","getTimezoneOffset","toISOString","slice","millisecToSec","millisec","secondsToTimeString","secs","includeHours","hours","minutes","padStart"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,qBAAT,QAAsC,QAAtC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,GAAgB;AACrB,QAAMC,CAAC,GAAG,IAAIC,IAAJ,EAAV;AACA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACK,OAAF,KAAc,IAAzB,CAAhB;AACA,SAAOH,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,QAAT,CAAkBC,EAAlB,EAAsB;AAC3B,QAAMC,IAAI,GAAG,IAAIP,IAAJ,CAASM,EAAE,IAAI,IAAIN,IAAJ,GAAWI,OAAX,EAAf,CAAb;AACA,QAAMI,OAAO,GAAG,IAAIR,IAAJ,CACdO,IAAI,CAACH,OAAL,KAAiBG,IAAI,CAACE,iBAAL,KAA2B,KAD9B,EAEdC,WAFc,EAAhB;AAGA,SAAOF,OAAO,CAACG,KAAR,CAAc,EAAd,EAAkB,CAAC,CAAnB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AACtC,SAAOA,QAAQ,GAAG,KAAlB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAO;AAAEC,EAAAA,YAAY,GAAG;AAAjB,IAA2B,EAAlC,KAAyC;AAC1E,MAAI,CAACD,IAAD,IAAS,CAACnB,qBAAqB,CAACmB,IAAD,CAAnC,EAA2C;AACzC,WAAOC,YAAY,GAAG,UAAH,GAAgB,OAAnC;AACD;;AACD,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAGrB,MAAM,CAACkB,IAAD,EAAO,EAAP,CAApB;;AACA,MAAIC,YAAJ,EAAkB;AAChBC,IAAAA,KAAK,GAAI,GAAE,CAACpB,MAAM,CAACkB,IAAD,EAAO,KAAK,EAAZ,CAAN,GAAwB,EAAzB,EAA6BI,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAA8C,GAAzD;AACAD,IAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;AACD;;AACDA,EAAAA,OAAO,IAAI,EAAX;AACA,QAAMjB,OAAO,GAAIc,IAAI,GAAG,EAAR,GAAc,EAA9B;AACA,SAAQ,GAAEE,KAAM,GAAEC,OAAO,CAACC,QAAR,CAAiB,CAAjB,EAAoB,GAApB,CAAyB,IAAGlB,OAAO,CAACkB,QAAR,CAAiB,CAAjB,EAAoB,GAApB,CAAyB,EAAvE;AACD,CAbM","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { isIntegerOrIntegerStr } from \"./core\";\nimport { intDiv } from \"./math\";\n\n/**\n * Time-related utility functions.\n */\n\n/**\n * Returns the current Unix time in seconds.\n *\n * @return {number} Current Unix time in seconds.\n */\nexport function time() {\n  const d = new Date();\n  const seconds = Math.round(d.getTime() / 1000);\n  return seconds;\n}\n\n/**\n * Returns the time string approximated to the nearest microsecond\n * corresponding the given Unix timestamp in milliseconds\n * in the format \"HH:mm:ss.ms\".\n *\n * @param {number} [ms] The time in microseconds to convert into a string.\n *                      If omitted, the current time will be used.\n * @return {string} The time string.\n */\nexport function msToTime(ms) {\n  const date = new Date(ms || new Date().getTime());\n  const isoDate = new Date(\n    date.getTime() - date.getTimezoneOffset() * 60000\n  ).toISOString();\n  return isoDate.slice(11, -1);\n}\n\n/**\n * Converts milliseconds to seconds.\n *\n * @param {number} millisec Number of milliseconds.\n * @return {number} The milliseconds in seconds.\n */\nexport function millisecToSec(millisec) {\n  return millisec * 0.001;\n}\n\n/**\n * Converts seconds to a `minutes:seconds` or `hours:minutes:seconds` time string\n * (if the second parameter is an object with `includeHours` set to a truthy value),\n * e.g. `123` becomes `\"02:03\"`, or `\"00:02:03\"` if `includeHours` is truthy.\n *\n * @param {number} secs The number of seconds.\n * @param {Object} options Options.\n * @param {Object.boolean} options.includeHours \"true\" to include hours (defaults to \"false\" if omitted).\n * @return {string} The time string.\n */\nexport const secondsToTimeString = (secs, { includeHours = false } = {}) => {\n  if (!secs || !isIntegerOrIntegerStr(secs)) {\n    return includeHours ? \"00:00:00\" : \"00:00\";\n  }\n  let hours = \"\";\n  let minutes = intDiv(secs, 60);\n  if (includeHours) {\n    hours = `${(intDiv(secs, 60 * 60) + \"\").padStart(2, \"0\")}:`;\n    minutes = minutes % 60;\n  }\n  minutes += \"\";\n  const seconds = (secs % 60) + \"\";\n  return `${hours}${minutes.padStart(2, \"0\")}:${seconds.padStart(2, \"0\")}`;\n};\n"],"file":"time.js"}