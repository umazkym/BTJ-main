{"version":3,"sources":["../../../src/modules/map-coordinates.js"],"names":["clampLat","lat","Number","wrapLng","lng","normalizeLat","Math","abs","normalizeLng"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAGC,GAAG,IAAIC,MAAM,CAACD,GAAG,GAAG,CAAC,EAAP,GAAY,CAAC,EAAb,GAAkBA,GAAG,GAAG,EAAN,GAAW,EAAX,GAAgBA,GAAnC,CAA9B;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,OAAO,GAAGC,GAAG,IAAI;AAC5BA,EAAAA,GAAG,GAAGF,MAAM,CAACE,GAAD,CAAZ;;AACA,SAAOA,GAAG,GAAG,GAAb,EAAkB;AAChBA,IAAAA,GAAG,IAAI,GAAP;AACD;;AACD,SAAOA,GAAG,GAAG,CAAC,GAAd,EAAmB;AACjBA,IAAAA,GAAG,IAAI,GAAP;AACD;;AACD,SAAOA,GAAP;AACD,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAGJ,GAAG,IAAI;AACjCA,EAAAA,GAAG,GAAGD,QAAQ,CAACC,GAAD,CAAd;;AACA,MAAIA,GAAG,IAAI,CAAX,EAAc;AACZ;AACA,WAAO,KAAKA,GAAZ;AACD,GAHD,MAGO;AACL;AACA,WAAO,KAAKK,IAAI,CAACC,GAAL,CAASN,GAAT,CAAZ;AACD;AACF,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,YAAY,GAAGJ,GAAG,IAAI;AACjCA,EAAAA,GAAG,GAAGD,OAAO,CAACC,GAAD,CAAb;AACA,SAAOA,GAAG,GAAG,GAAb;AACD,CAHM","sourcesContent":["/*\n * Copyright (c) 2022 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Utility functions related to the coordinates of a map.\n */\n\n/**\n * Clamps a latitude value so that it is always between -90 and 90.\n *\n * Latitude ranges between -90 and 90 degrees, inclusive.\n * Values above or below this range will be clamped to the range [-90, 90].\n * This means that if the value specified is less than -90, it will be set to -90.\n * And if the value is greater than 90, it will be set to 90.\n *\n * @param {number|string} lat Latitude. Either a number or a string which can be casted to a number.\n * @return {number} Latitude, clamped.\n */\nexport const clampLat = lat => Number(lat < -90 ? -90 : lat > 90 ? 90 : lat);\n\n/**\n * Wraps a longitude value so that it is always between -180 and 180.\n *\n * Longitude ranges between -180 and 180 degrees, inclusive.\n * Values above or below this range will be wrapped so that they fall within the range.\n * For example, a value of -190 will be converted to 170.\n * A value of 190 will be converted to -170.\n * This reflects the fact that longitudes wrap around the globe.\n *\n * @param {number|string} lng Longitude. Either a number or a string which can be casted to a number.\n * @return {number} lng Longitude, wrapped.\n */\nexport const wrapLng = lng => {\n  lng = Number(lng);\n  while (lng > 180) {\n    lng -= 360;\n  }\n  while (lng < -180) {\n    lng += 360;\n  }\n  return lng;\n};\n\n/**\n * Normalizes a latitude so that it is within the range [0, 180].\n *\n * 1. normalizeLat(90) === 0;\n * 2. normalizeLat(0) === 90;\n * 3. normalizeLat(-90) === 180;\n *\n * @param {number|string} lat Latitude. Either a number or a string which can be casted to a number.\n * @return {number} Latitude, normalized.\n */\nexport const normalizeLat = lat => {\n  lat = clampLat(lat);\n  if (lat >= 0) {\n    // 1. + 2.\n    return 90 - lat;\n  } else {\n    // 3.\n    return 90 + Math.abs(lat);\n  }\n};\n\n/**\n * Normalizes a longitude so that it is within the range [0, 360].\n *\n * 1. normalizeLng(-180) === 0;\n * 2. normalizeLng(0) === 180;\n * 3. normalizeLng(180) === 360;\n *\n * @param {number} lng Longitude. Either a number or a string which can be casted to a number.\n * @return {number} Longitude, normalized.\n */\nexport const normalizeLng = lng => {\n  lng = wrapLng(lng);\n  return lng + 180;\n};\n"],"file":"map-coordinates.js"}